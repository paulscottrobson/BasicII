
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Mon Jun 03 09:52:17 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 10 05 01	jmp $010510		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	2f 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	7e 02					.word Binary_And               & $FFFF ; token $2001 "and"
>010004	8e 02					.word Binary_Or                & $FFFF ; token $2002 "or"
>010006	9e 02					.word Binary_Xor               & $FFFF ; token $2003 "xor"
>010008	e2 02					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	49 03					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	ae 02					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	2b 03					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	0d 03					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c8 02					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	f7 01					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	49 02					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	5b 04					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	d8 03					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	4f 04					.word Binary_Modulus           & $FFFF ; token $260e "mod"
>01001e	5a 02					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	6c 02					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	d9 04					.word Function_Random          & $FFFF ; token $3a11 "rnd()"
>010024	b6 04					.word Function_Sgn             & $FFFF ; token $3a12 "sgn("
>010026	8f 04					.word Function_Abs             & $FFFF ; token $3a13 "abs("
>010028	2f 05					.word IllegalToken             & $FFFF ; token $3a14 "len("
>01002a	2f 05					.word IllegalToken             & $FFFF ; token $3c15 ","
>01002c	2f 05					.word IllegalToken             & $FFFF ; token $3c16 ";"
>01002e	2f 05					.word IllegalToken             & $FFFF ; token $3c17 ":"
>010030	2f 05					.word IllegalToken             & $FFFF ; token $3c18 "("
>010032	2f 05					.word IllegalToken             & $FFFF ; token $3c19 ")"
>010034	2f 05					.word IllegalToken             & $FFFF ; token $3e1a "let"
.010036					TokenText:
>010036	04 61 6e 64				.text $04,"and"      ; token $2001
>01003a	03 6f 72				.text $03,"or"       ; token $2002
>01003d	04 78 6f 72				.text $04,"xor"      ; token $2003
>010041	12 3c					.text $12,"<"        ; token $2204
>010043	12 3e					.text $12,">"        ; token $2205
>010045	12 3d					.text $12,"="        ; token $2206
>010047	13 3c 3d				.text $13,"<="       ; token $2207
>01004a	13 3e 3d				.text $13,">="       ; token $2208
>01004d	13 3c 3e				.text $13,"<>"       ; token $2209
>010050	22 2b					.text $22,"+"        ; token $240a
>010052	22 2d					.text $22,"-"        ; token $240b
>010054	32 2a					.text $32,"*"        ; token $260c
>010056	32 2f					.text $32,"/"        ; token $260d
>010058	34 6d 6f 64				.text $34,"mod"      ; token $260e
>01005c	33 3e 3e				.text $33,">>"       ; token $260f
>01005f	33 3c 3c				.text $33,"<<"       ; token $2610
>010062	d6 72 6e 64 28 29			.text $d6,"rnd()"    ; token $3a11
>010068	d5 73 67 6e 28				.text $d5,"sgn("     ; token $3a12
>01006d	d5 61 62 73 28				.text $d5,"abs("     ; token $3a13
>010072	d5 6c 65 6e 28				.text $d5,"len("     ; token $3a14
>010077	e2 2c					.text $e2,","        ; token $3c15
>010079	e2 3b					.text $e2,";"        ; token $3c16
>01007b	e2 3a					.text $e2,":"        ; token $3c17
>01007d	e2 28					.text $e2,"("        ; token $3c18
>01007f	e2 29					.text $e2,")"        ; token $3c19
>010081	f4 6c 65 74				.text $f4,"let"      ; token $3e1a
>010085	00					.byte $00
=$2001					andTokenID                       = $2001
=$2002					orTokenID                        = $2002
=$2003					xorTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					modTokenID                       = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3a11					rndlparenrparenTokenID           = $3a11
=$3a12					sgnlparenTokenID                 = $3a12
=$3a13					abslparenTokenID                 = $3a13
=$3a14					lenlparenTokenID                 = $3a14
=$3c15					commaTokenID                     = $3c15
=$3c16					semicolonTokenID                 = $3c16
=$3c17					colonTokenID                     = $3c17
=$3c18					lparenTokenID                    = $3c18
=$3c19					rparenTokenID                    = $3c19
=$3e1a					letTokenID                       = $3e1a

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/block.inc

=$0004					BlockFastVariables = $0004
=$0070					BlockLowMemoryPtr = $0070
=$0072					BlockHighMemoryPtr = $0072
=$0080					BlockHashTable = $0080
=$0020					BlockHashTableSize = $0020
=$000f					BlockHashMask = $000f
=$0100					BlockProgranStart = $0100

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=$00					DPageNumber = DPBaseAddress 				; page number of workspace area
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DSignCount = DPBaseAddress + 16 			; Sign count in division.
=18					DTempStringPtr = DPBaseAddress + 18 		; Temporary string allocation (working down)
=20					DConstantShift = DPBaseAddress + 20 		; Constant Shift
=22					DRandom = DPBaseAddress + 22 				; *** LONG *** Random Seed
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Type (bit 15, string = 1), rest are precedence bits.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010086					EvaluateReset:
.010086	a0 72 00	ldy #$0072			ldy 	#BlockHighMemoryPtr 		; reset temp store pointer
.010089	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01008b	38		sec				sec 								; allocate 256 bytes
.01008c	e9 00 01	sbc #$0100			sbc 	#256
.01008f	85 12		sta $12				sta 	DTempStringPtr 				; store as temporary string pointer.
.010091	60		rts				rts
.010092					Evaluate:
.010092	a2 00 01	ldx #$0100			ldx 	#EXSBase					; reset the stack base
.010095	a9 00 00	lda #$0000			lda 	#0<<9 						; current precedence level.
.010098					EvaluateLevel:
.010098	95 20		sta $20,x			sta 	EXSPrecType+0,x 				; save precedence level, also sets type to integer.
.01009a	b2 06		lda ($06)			lda 	(DCodePtr)						; look at the next token
.01009c	f0 0e		beq $0100ac			beq 	_ELExpressionSyntax 			; EOL token, there's an error.
.01009e	30 2d		bmi $0100cd			bmi 	_ELConstant 					; 8000-FFFF constant.
.0100a0	c9 00 10	cmp #$1000			cmp 	#$1000 							; string constant ? 00xx
.0100a3	90 0a		bcc $0100af			bcc 	_ELStringConstant
.0100a5	c9 00 20	cmp #$2000			cmp 	#$2000
.0100a8	90 1d		bcc $0100c7			bcc 	_ELConstantShift				; constant shift ? 1xxx
.0100aa	b0 7d		bcs $010129			bcs 	_ELKeywordFunction 				; must be 2000-7FFF e.g. identifier or keyword.
.0100ac					_ELExpressionSyntax:
.0100ac	4c 3c 05	jmp $01053c			jmp 	SyntaxError
.0100af					_ELStringConstant:
.0100af	a5 06		lda $06				lda 	DCodePtr 						; get the address of the token
.0100b1	1a		inc a				inc 	a 								; adding 2, start of the string
.0100b2	1a		inc a				inc 	a
.0100b3	95 00		sta $00,x			sta 	EXSValueL+0,x 					; the LSB of the string.
.0100b5	74 10		stz $10,x			stz 	EXSValueH+0,x 					; the MSB is always zero.
.0100b7	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; make type string
.0100b9	09 00 80	ora #$8000			ora 	#$8000
.0100bc	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0100be	18		clc				clc
.0100bf	b2 06		lda ($06)			lda 	(DCodePtr) 						; add length to pointer to skip over
.0100c1	65 06		adc $06				adc 	DCodePtr
.0100c3	85 06		sta $06				sta 	DCodePtr
.0100c5	80 1b		bra $0100e2			bra 	_ELGotAtom
.0100c7					_ELConstantShift:
.0100c7	85 14		sta $14				sta 	DConstantShift 					; update constant shift
.0100c9	e6 06		inc $06				inc 	DCodePtr 						; shift over constant shift
.0100cb	e6 06		inc $06				inc 	DCodePtr 						; fall through to constant code.
.0100cd					_ELConstant:
.0100cd	b2 06		lda ($06)			lda 	(DCodePtr)						; get the token (for fall through)
.0100cf	0a		asl a				asl 	a 								; shift left, also gets rid of the high bit
.0100d0	95 00		sta $00,x			sta 	EXSValueL+0,x 					; this is the low word
.0100d2	a5 14		lda $14				lda 	DConstantShift 					; get the constant shift
.0100d4	29 ff 0f	and #$0fff			and 	#$0FFF 							; mask off bits 12-15
.0100d7	4a		lsr a				lsr 	a 								; rotate bit 0 into carry
.0100d8	95 10		sta $10,x			sta 	EXSValueH+0,x 					; this is the high word
.0100da	76 00		ror $00,x			ror 	EXSValueL+0,x 					; rotate carry into the low word
.0100dc	64 14		stz $14				stz 	DConstantShift 					; reset the constant shift to zero.
.0100de	e6 06		inc $06				inc 	DCodePtr 						; skip over code pointer
.0100e0	e6 06		inc $06				inc 	DCodePtr
.0100e2					_ELGotAtom:
.0100e2	b2 06		lda ($06)			lda 	(DCodePtr)						; get the next token.
.0100e4	a8		tay				tay 									; save in Y, temporarily.
.0100e5	29 00 f0	and #$f000			and 	#$F000 							; is it a binary operator keyword, 001x xxxx xxxx xxxx
.0100e8	c9 00 20	cmp #$2000			cmp 	#$2000
.0100eb	d0 34		bne $010121			bne 	_ELExit 						; no, exit.
.0100ed	b5 20		lda $20,x			lda 	EXSPrecType,X 					; get current precedence level
.0100ef	29 ff 7f	and #$7fff			and 	#$7FFF 							; remove the type bit.
.0100f2	85 08		sta $08				sta 	DTemp1 							; save it.
.0100f4	98		tya				tya 									; get token back
.0100f5	29 00 1e	and #$1e00			and 	#15<<9 							; mask out the precedence data.
.0100f8	c5 08		cmp $08				cmp 	DTemp1 							; compare against current level
.0100fa	90 25		bcc $010121			bcc 	_ELExit 						; if too low, then exit back.
.0100fc	5a		phy				phy 									; save operator token on stack.
.0100fd	e6 06		inc $06				inc 	DCodePtr 						; skip over it
.0100ff	e6 06		inc $06				inc 	DCodePtr
.010101	18		clc				clc 									; precedence data still in A, add 1 level to it
.010102	69 00 02	adc #$0200			adc 	#1<<9
.010105	e8		inx				inx 									; calculate the RHS at the next stack level.
.010106	e8		inx				inx
.010107	20 98 00	jsr $010098			jsr 	EvaluateLevel
.01010a	ca		dex				dex
.01010b	ca		dex				dex
.01010c	68		pla				pla 									; get operator back
.01010d					_ELExecuteA:
.01010d	29 ff 01	and #$01ff			and 	#$01FF 							; keyword ID.
.010110	0a		asl a				asl 	a 								; double it as keyword vector table is word data
.010111	9b		txy				txy 									; save X in Y
.010112	aa		tax				tax 									; double keyword ID in X
.010113	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 				; this is the vector address
.010117	bb		tyx				tyx 									; restore X.
.010118	8f 1d 01 01	sta $01011d			sta 	_ELCallRoutine+1 				; Self modifying, will not work in ROM.
.01011c					_ELCallRoutine:
.01011c	20 1c 01	jsr $01011c			jsr 	_ELCallRoutine
.01011f	80 c1		bra $0100e2			bra 	_ELGotAtom 						; go round operator level again.
.010121					_ELExit:
.010121	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; put bit 15 in carry flag
.010123	0a		asl a				asl
.010124	b5 00		lda $00,x			lda 	EXSValueL+0,x 					; put value in YA
.010126	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010128	60		rts				rts
.010129					_ELKeywordFunction:
.010129	c9 00 40	cmp #$4000			cmp 	#$4000 							; identifier (e.g. variable) if in range $4000-$7FFF
.01012c	b0 1a		bcs $010148			bcs 	_ELVariable 					; (we've already discounted 8000-FFFF)
.01012e	c9 0b 24	cmp #$240b			cmp 	#minusTokenID 					; special case keywords -(atom) (expression)
.010131	f0 32		beq $010165			beq 	_ELMinusAtom
.010133	c9 18 3c	cmp #$3c18			cmp 	#lparenTokenID
.010136	f0 15		beq $01014d			beq 	_ELParenthesis
.010138	a8		tay				tay 									; save token in Y
.010139	29 00 fe	and #$fe00			and 	#$FE00 							; look for 0011 101x ? i.e. a unary function.
.01013c	c9 00 3a	cmp #$3a00			cmp 	#$3A00 							; if it isn't then exit
.01013f	d0 e0		bne $010121			bne 	_ELExit
.010141					_ELUnaryFunction:
.010141	e6 06		inc $06				inc 	DCodePtr 						; skip over the unary function token
.010143	e6 06		inc $06				inc 	DCodePtr
.010145	98		tya				tya 									; get token back
.010146	80 c5		bra $01010d			bra 	_ELExecuteA 					; and execute it.
.010148					_ELVariable:
.010148	ea		nop				nop
.010149	ea		nop				nop
.01014a	ea		nop				nop
.01014b	80 95		bra $0100e2			bra 	_ELGotAtom
.01014d					_ELParenthesis:
.01014d	e6 06		inc $06				inc 	DCodePtr 						; skip over the ( token
.01014f	e6 06		inc $06				inc 	DCodePtr
.010151	20 ae 01	jsr $0101ae			jsr 	EvaluateNext 					; calculate the value in parenthesis, using next space on the stack.
.010154	a9 19 3c	lda #$3c19			lda 	#rparenTokenID 					; check for ) which should close the parenthesised expression.
.010157	20 4f 05	jsr $01054f			jsr 	CheckNextToken
.01015a	b5 02		lda $02,x			lda 	EXSValueL+2,x 					; copy the value in directly from level 2 to level 0.
.01015c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01015e	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010160	95 10		sta $10,x			sta 	EXSValueH+0,x
.010162	82 7d ff	brl $0100e2			brl 	_ELGotAtom 						; and go round looking for the next binary operator
.010165					_ELMinusAtom:
.010165	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.010167	e6 06		inc $06				inc 	DCodePtr
.010169	e8		inx				inx 									; make space
.01016a	e8		inx				inx
.01016b	a9 00 10	lda #$1000			lda 	#8<<9 							; means binary operation will be impossible.
.01016e	20 98 00	jsr $010098			jsr 	EvaluateLevel
.010171	ca		dex				dex
.010172	ca		dex				dex
.010173	38		sec				sec 									; do the subtraction
.010174	a9 00 00	lda #$0000			lda 	#0
.010177	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010179	95 00		sta $00,x			sta 	EXSValueL+0,x
.01017b	a9 00 00	lda #$0000			lda 	#0
.01017e	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010180	95 10		sta $10,x			sta 	EXSValueH+0,x
.010182	4c e2 00	jmp $0100e2			jmp 	_ELGotAtom
.010185					CheckBothNumeric:
.010185	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; check bit 15 of both types are zero
.010187	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010189	30 01		bmi $01018c			bmi 	_CNError
.01018b	60		rts				rts
.01018c					_CNError:
.01018c	20 4c 05	jsr $01054c			jsr 	ReportError
>01018f	4e 75 6d 65 72 69 63 20				.text	"Numeric value expected",0
>010197	76 61 6c 75 65 20 65 78 70 65 63 74 65 64 00
.0101a6					ResetTypeInteger:
.0101a6	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; clear bit 15 of type, forcing an integer return.
.0101a8	29 ff 7f	and #$7fff			and 	#$7FFF
.0101ab	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101ad	60		rts				rts
.0101ae					EvaluateNext:
.0101ae	e8		inx				inx 									; stack forward
.0101af	e8		inx				inx
.0101b0	a9 00 00	lda #$0000			lda 	#0<<9 							; lowest precedence.
.0101b3	20 98 00	jsr $010098			jsr 	EvaluateLevel 					; do at next level
.0101b6	ca		dex				dex 									; reset stack
.0101b7	ca		dex				dex
.0101b8	60		rts				rts
.0101b9					EvaluateInteger:
.0101b9	20 92 00	jsr $010092			jsr 	Evaluate
.0101bc	b0 01		bcs $0101bf			bcs 	EIType
.0101be	60		rts				rts
.0101bf					EIType:
.0101bf	20 4c 05	jsr $01054c			jsr 	ReportError
>0101c2	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00
>0101ca	78 70 65 63 74 65 64 00
.0101d2					EvaluateNextInteger:
.0101d2	20 ae 01	jsr $0101ae			jsr 	EvaluateNext
.0101d5	b0 e8		bcs $0101bf			bcs 	EIType
.0101d7	60		rts				rts
.0101d8					EvaluateString:
.0101d8	20 92 00	jsr $010092			jsr 	Evaluate
.0101db	90 01		bcc $0101de			bcc 	ESType
.0101dd	60		rts				rts
.0101de					ESType:
.0101de	20 4c 05	jsr $01054c			jsr 	ReportError
>0101e1	53 74 72 69 6e 67 20 65				.text 	"String expected",$00
>0101e9	78 70 65 63 74 65 64 00
.0101f1					EvaluateNextString:
.0101f1	20 ae 01	jsr $0101ae			jsr 	EvaluateNext
.0101f4	90 e8		bcc $0101de			bcc 	ESType
.0101f6	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0101f7					Binary_Add:
.0101f7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0101f9	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0101fb	30 12		bmi $01020f		bmi 	_BATypeError
.0101fd	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0101ff	30 3f		bmi $010240		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010201	18		clc			clc
.010202	b5 00		lda $00,x		lda		EXSValueL+0,x
.010204	75 02		adc $02,x		adc 	EXSValueL+2,x
.010206	95 00		sta $00,x		sta 	EXSValueL+0,x
.010208	b5 10		lda $10,x		lda		EXSValueH+0,x
.01020a	75 12		adc $12,x		adc 	EXSValueH+2,x
.01020c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01020e	60		rts			rts
.01020f					_BATypeError:
.01020f	20 4c 05	jsr $01054c		jsr 	ReportError
>010212	2b 20 6f 70 65 72 61 74			.text 	"+ operator can't mix types",$00
>01021a	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01022a	65 73 00
.01022d					_BALengthError:
.01022d	20 4c 05	jsr $01054c		jsr 	ReportError
>010230	53 74 72 69 6e 67 20 74			.text 	"String too long",$00
>010238	6f 6f 20 6c 6f 6e 67 00
.010240					_BAConcatenateString:
.010240	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010242	85 08		sta $08			sta 	DTemp1
.010244	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010246	85 0c		sta $0c			sta 	DTemp2
.010248	ea		nop			nop
.010249					Binary_Subtract:
.010249	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.01024c	38		sec			sec
.01024d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01024f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010251	95 00		sta $00,x		sta 	EXSValueL+0,x
.010253	b5 10		lda $10,x		lda		EXSValueH+0,x
.010255	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010257	95 10		sta $10,x		sta 	EXSValueH+0,x
.010259	60		rts			rts
.01025a					Binary_ShiftRight:
.01025a	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.01025d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01025f	29 3f 00	and #$003f		and 	#63
.010262	f0 07		beq $01026b		beq		_Binary_SRExit
.010264					_Binary_SRLoop:
.010264	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010266	76 00		ror $00,x		ror 	EXSValueL+0,x
.010268	3a		dec a			dec 	a
.010269	d0 f9		bne $010264		bne 	_Binary_SRLoop
.01026b					_Binary_SRExit:
.01026b	60		rts			rts
.01026c					Binary_ShiftLeft:
.01026c	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.01026f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010271	29 3f 00	and #$003f		and 	#63
.010274	f0 07		beq $01027d		beq		_Binary_SLExit
.010276					_Binary_SLLoop:
.010276	16 00		asl $00,x		asl 	EXSValueL+0,x
.010278	36 10		rol $10,x		rol 	EXSValueH+0,x
.01027a	3a		dec a			dec 	a
.01027b	d0 f9		bne $010276		bne 	_Binary_SLLoop
.01027d					_Binary_SLExit:
.01027d	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.01027e					Binary_And:
.01027e	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.010281	b5 00		lda $00,x		lda		EXSValueL+0,x
.010283	35 02		and $02,x		and 	EXSValueL+2,x
.010285	95 00		sta $00,x		sta 	EXSValueL+0,x
.010287	b5 10		lda $10,x		lda		EXSValueH+0,x
.010289	35 12		and $12,x		and 	EXSValueH+2,x
.01028b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01028d	60		rts			rts
.01028e					Binary_Or:
.01028e	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.010291	b5 00		lda $00,x		lda		EXSValueL+0,x
.010293	15 02		ora $02,x		ora 	EXSValueL+2,x
.010295	95 00		sta $00,x		sta 	EXSValueL+0,x
.010297	b5 10		lda $10,x		lda		EXSValueH+0,x
.010299	15 12		ora $12,x		ora 	EXSValueH+2,x
.01029b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01029d	60		rts			rts
.01029e					Binary_Xor:
.01029e	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.0102a1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0102a3	55 02		eor $02,x		eor 	EXSValueL+2,x
.0102a5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0102a7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0102a9	55 12		eor $12,x		eor 	EXSValueH+2,x
.0102ab	95 10		sta $10,x		sta 	EXSValueH+0,x
.0102ad	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.0102ae					Binary_Equals:
.0102ae	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0102b1	b0 0e		bcs $0102c1		bcs 	_BEString
.0102b3	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0102b5	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0102b7	d0 4f		bne $010308		bne 	Compare_Fail
.0102b9	b5 10		lda $10,x		lda 	EXSValueH,x
.0102bb	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0102bd	d0 49		bne $010308		bne 	Compare_Fail
.0102bf	80 3f		bra $010300		bra 	Compare_Succeed
.0102c1					_BEString:
.0102c1	09 00 00	ora #$0000		ora 	#$0000
.0102c4	f0 3a		beq $010300		beq 	Compare_Succeed
.0102c6	80 40		bra $010308		bra 	Compare_Fail
.0102c8					Binary_NotEquals:
.0102c8	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0102cb	b0 0e		bcs $0102db		bcs 	_BNEString
.0102cd	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0102cf	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0102d1	d0 2d		bne $010300		bne 	Compare_Succeed
.0102d3	b5 10		lda $10,x		lda 	EXSValueH,x
.0102d5	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0102d7	d0 27		bne $010300		bne 	Compare_Succeed
.0102d9	80 2d		bra $010308		bra 	Compare_Fail
.0102db					_BNEString:
.0102db	09 00 00	ora #$0000		ora 	#$0000
.0102de	d0 20		bne $010300		bne 	Compare_Succeed
.0102e0	80 26		bra $010308		bra 	Compare_Fail
.0102e2					Binary_Less:
.0102e2	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0102e5	b0 12		bcs $0102f9		bcs 	_BLString
.0102e7	38		sec			sec
.0102e8	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0102ea	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0102ec	b5 10		lda $10,x		lda 	EXSValueH,x
.0102ee	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0102f0	50 03		bvc $0102f5		bvc 	*+5
.0102f2	49 00 80	eor #$8000		eor 	#$8000
.0102f5	30 09		bmi $010300		bmi 	Compare_Succeed
.0102f7	80 0f		bra $010308		bra 	Compare_Fail
.0102f9					_BLString:
.0102f9	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0102fc	f0 02		beq $010300		beq 	Compare_Succeed
.0102fe	80 08		bra $010308		bra 	Compare_Fail
.010300					Compare_Succeed:
.010300	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010303	95 00		sta $00,x		sta 	EXSValueL,x
.010305	95 10		sta $10,x		sta 	EXSValueH,x
.010307	60		rts			rts
.010308					Compare_Fail:
.010308	74 00		stz $00,x		stz 	EXSValueL,x
.01030a	74 10		stz $10,x		stz 	EXSValueH,x
.01030c	60		rts			rts
.01030d					Binary_GreaterEqual:
.01030d	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010310	b0 12		bcs $010324		bcs 	_BGEString
.010312	38		sec			sec
.010313	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010315	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010317	b5 10		lda $10,x		lda 	EXSValueH,x
.010319	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01031b	50 03		bvc $010320		bvc 	*+5
.01031d	49 00 80	eor #$8000		eor 	#$8000
.010320	10 de		bpl $010300		bpl 	Compare_Succeed
.010322	80 e4		bra $010308		bra 	Compare_Fail
.010324					_BGEString:
.010324	09 00 00	ora #$0000		ora 	#$0000
.010327	10 d7		bpl $010300		bpl 	Compare_Succeed
.010329	80 dd		bra $010308		bra 	Compare_Fail
.01032b					Binary_LessEqual:
.01032b	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01032e	b0 12		bcs $010342		bcs 	_BLEString
.010330	18		clc			clc 									; numeric <= signed
.010331	b5 00		lda $00,x		lda 	EXSValueL,x
.010333	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010335	b5 10		lda $10,x		lda 	EXSValueH,x
.010337	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010339	50 03		bvc $01033e		bvc 	*+5
.01033b	49 00 80	eor #$8000		eor 	#$8000
.01033e	30 c0		bmi $010300		bmi 	Compare_Succeed
.010340	80 c6		bra $010308		bra 	Compare_Fail
.010342					_BLEString:
.010342	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010345	d0 b9		bne $010300		bne 	Compare_Succeed
.010347	80 bf		bra $010308		bra 	Compare_Fail
.010349					Binary_Greater:
.010349	20 67 03	jsr $010367		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01034c	b0 12		bcs $010360		bcs 	_BGString
.01034e	18		clc			clc 									; numeric > signed
.01034f	b5 00		lda $00,x		lda 	EXSValueL,x
.010351	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010353	b5 10		lda $10,x		lda 	EXSValueH,x
.010355	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010357	50 03		bvc $01035c		bvc 	*+5
.010359	49 00 80	eor #$8000		eor 	#$8000
.01035c	10 a2		bpl $010300		bpl 	Compare_Succeed
.01035e	80 a8		bra $010308		bra 	Compare_Fail
.010360					_BGString:
.010360	c9 01 00	cmp #$0001		cmp 	#$0001
.010363	f0 9b		beq $010300		beq 	Compare_Succeed
.010365	80 a1		bra $010308		bra 	Compare_Fail
.010367					CompareTypeCheck:
.010367	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010369	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01036b	30 06		bmi $010373		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01036d	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01036f	30 22		bmi $010393		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010371	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010372	60		rts			rts
.010373					_CTCFail:
.010373	20 4c 05	jsr $01054c		jsr 	ReportError
>010376	43 6f 6d 70 61 72 69 73			.text 	"Comparison must be same type",$00
>01037e	6f 6e 20 6d 75 73 74 20 62 65 20 73 61 6d 65 20
>01038e	74 79 70 65 00
.010393					_CTCStringCompare:
.010393	20 a6 01	jsr $0101a6		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010396	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010398	85 08		sta $08			sta 	DTemp1
.01039a	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01039c	85 0c		sta $0c			sta 	DTemp2
.01039e	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0103a1	a8		tay			tay
.0103a2	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0103a4	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0103a6	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0103a8	90 02		bcc $0103ac		bcc 	_CTCSmallest
.0103aa	b2 0c		lda ($0c)		lda 	(DTemp2)
.0103ac					_CTCSmallest:
.0103ac	85 10		sta $10			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0103ae					_CTCCompare:
.0103ae	c8		iny			iny 									; look at next character (done first, first char is size)
.0103af	c6 10		dec $10			dec 	DSignCount 						; decrement counter
.0103b1	30 16		bmi $0103c9		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0103b3	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0103b5	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0103b7	f0 f5		beq $0103ae		beq 	_CTCCompare 					; if zero, try the next character.
.0103b9	b0 07		bcs $0103c2		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0103bb					_CTCLess:
.0103bb	c2 20		rep #$20		rep 	#$20
.0103bd	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0103c0	80 14		bra $0103d6		bra 	_CTCExit
.0103c2					_CTCGreater:
.0103c2	c2 20		rep #$20		rep 	#$20
.0103c4	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0103c7	80 0d		bra $0103d6		bra 	_CTCExit
.0103c9					_CTCEqualSoFar:
.0103c9	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0103cb	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0103cd	90 ec		bcc $0103bb		bcc 	_CTCLess
.0103cf	d0 f1		bne $0103c2		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0103d1	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0103d3	a9 00 00	lda #$0000		lda 	#$0000
.0103d6					_CTCExit:
.0103d6	38		sec			sec 									; return with CS indicating string comparison.
.0103d7	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.0103d8					Binary_Divide:
.0103d8	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.0103db	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0103dd	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0103df	d0 14		bne $0103f5		bne 	_BinaryDivide_Ok
.0103e1	20 4c 05	jsr $01054c		jsr 	ReportError							; error if so.
>0103e4	44 69 76 69 73 69 6f 6e			.text	"Division by zero",$00
>0103ec	20 62 79 20 7a 65 72 6f 00
.0103f5					_BinaryDivide_Ok:
.0103f5	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0103f7	64 0a		stz $0a			stz 	DTemp1+2
.0103f9	64 10		stz $10			stz 	DSignCount  						; zero sign count.
.0103fb	5a		phy			phy 										; save Y (bit counter)
.0103fc	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0103fe	10 07		bpl $010407		bpl 	_BinaryDivide_RightDone
.010400	e8		inx			inx
.010401	e8		inx			inx
.010402	20 3d 04	jsr $01043d		jsr 	Binary_DivNegate
.010405	ca		dex			dex
.010406	ca		dex			dex
.010407					_BinaryDivide_RightDone:
.010407	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010409	10 03		bpl $01040e		bpl 	_BinaryDivide_LeftDone
.01040b	20 3d 04	jsr $01043d		jsr 	Binary_DivNegate
.01040e					_BinaryDivide_LeftDone:
.01040e	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010411					_BinaryDivide_Loop:
.010411	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010413	36 10		rol $10,x		rol 	EXSValueH+0,x
.010415	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010417	26 0a		rol $0a			rol 	DTemp1+2
.010419	38		sec			sec											; calculate A-M
.01041a	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01041c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01041e	85 0c		sta $0c			sta 	DTemp2
.010420	a5 0a		lda $0a			lda 	DTemp1+2
.010422	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010424	90 08		bcc $01042e		bcc 	_Binary_NoSubract 					; if A < M skip this
.010426	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010428	a5 0c		lda $0c			lda 	DTemp2
.01042a	85 08		sta $08			sta 	DTemp1+0
.01042c	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01042e					_Binary_NoSubract:
.01042e	88		dey			dey 										; do it 32 times.
.01042f	d0 e0		bne $010411		bne 	_BinaryDivide_Loop
.010431					_BinaryDivide_Exit:
.010431	a5 10		lda $10			lda 	DSignCount 							; restore sign
.010433	29 01 00	and #$0001		and 	#1
.010436	f0 03		beq $01043b		beq 	_BinaryDivide_Exit2
.010438	20 3d 04	jsr $01043d		jsr 	Binary_DivNegate
.01043b					_BinaryDivide_Exit2:
.01043b	7a		ply			ply 										; restore Y
.01043c	60		rts			rts
.01043d					Binary_DivNegate:
.01043d	e6 10		inc $10			inc 	DSignCount 							; increment the count of signs.
.01043f	38		sec			sec 										; negate the value at stack X.
.010440	a9 00 00	lda #$0000		lda 	#$0000
.010443	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010445	95 00		sta $00,x		sta 	EXSValueL+0,x
.010447	a9 00 00	lda #$0000		lda 	#$0000
.01044a	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01044c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01044e	60		rts			rts
.01044f					Binary_Modulus:
.01044f	20 d8 03	jsr $0103d8		jsr 	Binary_Divide 						; do the divide
.010452	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010454	95 00		sta $00,x		sta 	EXSValueL+0,x
.010456	a5 0a		lda $0a			lda 	DTemp1+2
.010458	95 10		sta $10,x		sta 	EXSValueH+0,x
.01045a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.01045b					Binary_Multiply:
.01045b	20 85 01	jsr $010185		jsr 	CheckBothNumeric 					; check both values are numeric
.01045e	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010460	85 08		sta $08			sta 	DTemp1
.010462	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010464	85 0a		sta $0a			sta		DTemp1+2
.010466	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010468	74 10		stz $10,x		stz 	EXSValueH+0,x
.01046a					_BinaryMultiply_Loop:
.01046a	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01046c	05 0a		ora $0a			ora 	DTemp1+2
.01046e	f0 1e		beq $01048e		beq 	_BinaryMultiply_Exit
.010470	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010472	29 01 00	and #$0001		and 	#1
.010475	f0 0d		beq $010484		beq 	_BinaryMultiply_NoAdd
.010477	18		clc			clc 										; add multiplicand to result.
.010478	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01047a	75 02		adc $02,x		adc 	EXSValueL+2,x
.01047c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01047e	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010480	75 12		adc $12,x		adc 	EXSValueH+2,x
.010482	95 10		sta $10,x		sta 	EXSValueH+0,x
.010484					_BinaryMultiply_NoAdd:
.010484	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010486	66 08		ror $08			ror 	DTemp1
.010488	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01048a	36 12		rol $12,x		rol 	EXSValueH+2,x
.01048c	80 dc		bra $01046a		bra 	_BinaryMultiply_Loop 				; go round again.
.01048e					_BinaryMultiply_Exit:
.01048e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.01048f					Function_Abs:
.01048f	20 a6 01	jsr $0101a6			jsr 	ResetTypeInteger 			; returns an integer
.010492	20 d2 01	jsr $0101d2			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010495	a9 19 3c	lda #$3c19			lda 	#RParenTokenID 				; check )
.010498	20 4f 05	jsr $01054f			jsr 	CheckNextToken
.01049b	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01049d	30 07		bmi $0104a6			bmi 	_FAbsNegative 				; negate it if negative
.01049f	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0104a1	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0104a3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0104a5	60		rts				rts
.0104a6					_FAbsNegative:
.0104a6	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0104a7	a9 00 00	lda #$0000			lda 	#0
.0104aa	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0104ac	95 00		sta $00,x			sta 	EXSValueL+0,x
.0104ae	a9 00 00	lda #$0000			lda 	#0
.0104b1	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0104b3	95 10		sta $10,x			sta 	EXSValueH+0,x
.0104b5	60		rts				rts
.0104b6					Function_Sgn:
.0104b6	20 a6 01	jsr $0101a6			jsr 	ResetTypeInteger 			; returns integer
.0104b9	20 d2 01	jsr $0101d2			jsr 	EvaluateNextInteger 		; get an integer
.0104bc	a9 19 3c	lda #$3c19			lda 	#RParenTokenID 				; check )
.0104bf	20 4f 05	jsr $01054f			jsr 	CheckNextToken
.0104c2	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0104c4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0104c6	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper wod.
.0104c8	30 07		bmi $0104d1			bmi 	_FSgnNegative 				; set to -1 if signed
.0104ca	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0104cc	f0 02		beq $0104d0			beq 	_FSgnExit
.0104ce	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0104d0					_FSgnExit:
.0104d0	60		rts				rts
.0104d1					_FSgnNegative:
.0104d1	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0104d4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0104d6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0104d8	60		rts				rts
.0104d9					Function_Random:
.0104d9	20 a6 01	jsr $0101a6			jsr 	ResetTypeInteger
.0104dc	a5 16		lda $16				lda 	DRandom 					; check for non-zero
.0104de	05 18		ora $18				ora 	DRandom+2 					; they don't like these :)
.0104e0	d0 0a		bne $0104ec			bne 	_Rnd_NotZero
.0104e2	a9 37 00	lda #$0037			lda 	#$37 						; initialise it to the same value.
.0104e5	85 16		sta $16				sta 	DRandom
.0104e7	a9 e2 00	lda #$00e2			lda 	#$E2
.0104ea	85 18		sta $18				sta 	DRandom+2
.0104ec					_Rnd_NotZero:
.0104ec	20 f7 04	jsr $0104f7			jsr 	_Rnd_Process 				; call randomiser twice
.0104ef	95 10		sta $10,x			sta 	EXSValueH+0,x
.0104f1	20 f7 04	jsr $0104f7			jsr 	_Rnd_Process
.0104f4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0104f6	60		rts				rts
.0104f7					_Rnd_Process:
.0104f7	06 16		asl $16				asl 	DRandom 					; shift right, exit
.0104f9	26 18		rol $18				rol 	DRandom+2
.0104fb	90 0e		bcc $01050b			bcc 	_Rnd_Exit
.0104fd	a5 16		lda $16				lda 	DRandom 					; taps effectively
.0104ff	49 54 d4	eor #$d454			eor 	#$D454
.010502	85 16		sta $16				sta 	DRandom
.010504	a5 18		lda $18				lda 	DRandom+2
.010506	49 d5 55	eor #$55d5			eor 	#$55D5
.010509	85 18		sta $18				sta 	DRandom+2
.01050b					_Rnd_Exit:
.01050b	a5 16		lda $16				lda 	DRandom
.01050d	45 18		eor $18				eor 	DRandom+2
.01050f	60		rts				rts

;******  Return to file: ..\source\basic.asm

.010510					SwitchBasicInstance:
.010510	c2 30		rep #$30		rep 	#$30 									; 16 bit AX mode.
.010512	29 ff 00	and #$00ff		and 	#$00FF 									; make page number 24 bit
.010515	85 00		sta $00			sta 	DPageNumber 							; save page, base, high
.010517	86 02		stx $02			stx		DBaseAddress
.010519	84 04		sty $04			sty 	DHighAddress
.01051b	eb		xba			xba 											; put the page number (goes in the DBR) in B
.01051c	48		pha			pha 											; then copy it into B.
.01051d	ab		plb			plb
.01051e	ab		plb			plb
.01051f	20 86 00	jsr $010086		jsr 	EvaluateReset
.010522	a9 08 41	lda #$4108		lda 	#$4100+8 								; initialise Code Pointer
.010525	85 06		sta $06			sta 	DCodePtr
.010527	20 92 00	jsr $010092		jsr 	Evaluate 								; evaluate it.
.01052a	ea		nop			nop
.01052b					halt1:
.01052b	02 00		cop #$00		cop 	#0
.01052d	80 fc		bra $01052b		bra 	halt1
.01052f					IllegalToken:
.01052f	20 4c 05	jsr $01054c		jsr 	ReportError
>010532	42 61 64 20 74 6f 6b 65			.text 	"Bad token",0
>01053a	6e 00
.01053c					SyntaxError:
.01053c	20 4c 05	jsr $01054c		jsr 	ReportError
>01053f	53 79 6e 74 61 78 20 45			.text 	"Syntax Error",0
>010547	72 72 6f 72 00
.01054c					ReportError:
.01054c	ea		nop			nop
.01054d	80 fd		bra $01054c		bra 	ReportError
.01054f					CheckNextToken:
.01054f	d2 06		cmp ($06)		cmp 	(DCodePtr)
.010551	d0 05		bne $010558		bne 	_CTKError
.010553	e6 06		inc $06			inc 	DCodePtr
.010555	e6 06		inc $06			inc 	DCodePtr
.010557	60		rts			rts
.010558					_CTKError:
.010558	85 08		sta $08			sta 	DTemp1
.01055a	20 4c 05	jsr $01054c		jsr 	ReportError
>01055d	4d 69 73 73 69 6e 67 20			.text	"Missing ~",0
>010565	7e 00

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 5 times (80 bytes)...
>024068	00 00 00 00 00 00 00 00 20 41 00 c0 00 00 00 00
>024078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 7 times (112 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 0a 80 01 40 06 22
>024108	11 3a 00 00 0e 00 14 80 1a 3e 01 40 06 22 2a 80
>024118	00 00 00 00 ee ee ee ee 00 00 00 00 00 00 00 00
>024128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2028 times (32448 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing


; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Tue Jun  4 17:42:31 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c ab 06 01	jmp $0106ab		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	28 01					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	00 04					.word Binary_And               & $FFFF ; token $2001 "and"
>010004	10 04					.word Binary_Or                & $FFFF ; token $2002 "or"
>010006	20 04					.word Binary_Xor               & $FFFF ; token $2003 "xor"
>010008	64 04					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	cb 04					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	30 04					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	ad 04					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	8f 04					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	4a 04					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	4a 03					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	cb 03					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	dd 05					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	5a 05					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d1 05					.word Binary_Modulus           & $FFFF ; token $260e "mod"
>01001e	dc 03					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	ee 03					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	74 06					.word Function_Random          & $FFFF ; token $3a11 "rnd()"
>010024	51 06					.word Function_Sgn             & $FFFF ; token $3a12 "sgn("
>010026	2a 06					.word Function_Abs             & $FFFF ; token $3a13 "abs("
>010028	11 06					.word Function_Len             & $FFFF ; token $3a14 "len("
>01002a	28 01					.word IllegalToken             & $FFFF ; token $3c15 ","
>01002c	28 01					.word IllegalToken             & $FFFF ; token $3c16 ";"
>01002e	28 01					.word IllegalToken             & $FFFF ; token $3c17 ":"
>010030	28 01					.word IllegalToken             & $FFFF ; token $3c18 "("
>010032	28 01					.word IllegalToken             & $FFFF ; token $3c19 ")"
>010034	28 01					.word IllegalToken             & $FFFF ; token $3e1a "let"
.010036					TokenText:
>010036	04 61 6e 64				.text $04,"and"      ; token $2001
>01003a	03 6f 72				.text $03,"or"       ; token $2002
>01003d	04 78 6f 72				.text $04,"xor"      ; token $2003
>010041	12 3c					.text $12,"<"        ; token $2204
>010043	12 3e					.text $12,">"        ; token $2205
>010045	12 3d					.text $12,"="        ; token $2206
>010047	13 3c 3d				.text $13,"<="       ; token $2207
>01004a	13 3e 3d				.text $13,">="       ; token $2208
>01004d	13 3c 3e				.text $13,"<>"       ; token $2209
>010050	22 2b					.text $22,"+"        ; token $240a
>010052	22 2d					.text $22,"-"        ; token $240b
>010054	32 2a					.text $32,"*"        ; token $260c
>010056	32 2f					.text $32,"/"        ; token $260d
>010058	34 6d 6f 64				.text $34,"mod"      ; token $260e
>01005c	33 3e 3e				.text $33,">>"       ; token $260f
>01005f	33 3c 3c				.text $33,"<<"       ; token $2610
>010062	d6 72 6e 64 28 29			.text $d6,"rnd()"    ; token $3a11
>010068	d5 73 67 6e 28				.text $d5,"sgn("     ; token $3a12
>01006d	d5 61 62 73 28				.text $d5,"abs("     ; token $3a13
>010072	d5 6c 65 6e 28				.text $d5,"len("     ; token $3a14
>010077	e2 2c					.text $e2,","        ; token $3c15
>010079	e2 3b					.text $e2,";"        ; token $3c16
>01007b	e2 3a					.text $e2,":"        ; token $3c17
>01007d	e2 28					.text $e2,"("        ; token $3c18
>01007f	e2 29					.text $e2,")"        ; token $3c19
>010081	f4 6c 65 74				.text $f4,"let"      ; token $3e1a
>010085	00					.byte $00
=$2001					andTokenID                       = $2001
=$2002					orTokenID                        = $2002
=$2003					xorTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					modTokenID                       = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3a11					rndlparenrparenTokenID           = $3a11
=$3a12					sgnlparenTokenID                 = $3a12
=$3a13					abslparenTokenID                 = $3a13
=$3a14					lenlparenTokenID                 = $3a14
=$3c15					commaTokenID                     = $3c15
=$3c16					semicolonTokenID                 = $3c16
=$3c17					colonTokenID                     = $3c17
=$3c18					lparenTokenID                    = $3c18
=$3c19					rparenTokenID                    = $3c19
=$3e1a					letTokenID                       = $3e1a

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/block.inc

=$0004					BlockFastVariables = $0004
=$0070					BlockLowMemoryPtr = $0070
=$0072					BlockHighMemoryPtr = $0072
=$0080					BlockHashTable = $0080
=$0020					BlockHashTableSize = $0020
=$000f					BlockHashMask = $000f
=$0100					BlockProgranStart = $0100

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DSignCount = DPBaseAddress + 16 			; Sign count in division.
=18					DConstantShift = DPBaseAddress + 18 		; Constant Shift used in expression evaluation
=20					DRandom = DPBaseAddress + 20 				; *** LONG *** Random Seed
=24					DTempStringPtr = DPBaseAddress + 24 		; Temporary string allocation (working down)
=26					DStartTempString = DPBaseaddress + 26 		; Start of current temporary string
=28					DCurrentTempString = DPBaseaddress + 28 	; Next free in current temporary string
=30					DVariableDataAddress = DPBaseAddress + 30 	; Address of 4 byte data
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Type (bit 15, string = 1), rest are precedence bits.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010086					FindVariable:
.010086	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token
.010088	c9 1b 40	cmp #$401b			cmp 	#$401B 						; $4001-$401A represent fast variables A-Z
.01008b	b0 13		bcs $0100a0			bcs 	_FVStandard 				; if >= then it is stored in the hashed entries.
.01008d	29 1f 00	and #$001f			and 	#$001F 						; now 1-26
.010090	3a		dec a				dec 	a 							; now 0-25
.010091	0a		asl a				asl 	a 							; now 0-100
.010092	0a		asl a				asl 	a 							; and clears carry.
.010093	69 04 00	adc #$0004			adc 	#BlockFastVariables 		; address offset in block
.010096	65 02		adc $02				adc 	DBaseAddress 				; now contains the base address + offset + address
.010098	85 1e		sta $1e				sta 	DVariableDataAddress 		; save address
.01009a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01009c	e6 06		inc $06				inc 	DCodePtr
.01009e	18		clc				clc 								; and return CC == okay.
.01009f	60		rts				rts
.0100a0					_FVStandard:
.0100a0	48		pha				pha 								; save first token
.0100a1	29 0f 00	and #$000f			and 	#BlockHashMask 				; create a hash index
.0100a4	0a		asl a				asl 	a 							; double it, because it's a word address
.0100a5	85 08		sta $08				sta 	DTemp1 						; save it
.0100a7	68		pla				pla 								; restore first token.
.0100a8	eb		xba				xba 								; type bits were in 11 and 12, now they're in 3 and 4
.0100a9	29 18 00	and #$0018			and 	#$0018 						; isolate those type bits
.0100ac	0a		asl a				asl 	a 							; This makes A = type bits x 16
.0100ad	0a		asl a				asl 	a 							; A = type bits x 32 and clears carry.
.0100ae	65 08		adc $08				adc 	DTemp1 						; add offset in the table
.0100b0	69 80 00	adc #$0080			adc 	#BlockHashTable 			; now its an offset in the block
.0100b3	65 02		adc $02				adc 	DBaseAddress 				; now it's an address
.0100b5	85 08		sta $08				sta 	DTemp1 						; put it in DTemp1
.0100b7					_FVNext:
.0100b7	b2 08		lda ($08)			lda 	(DTemp1) 					; read the next link.
.0100b9	f0 32		beq $0100ed			beq 	_FVFail						; if zero, the variable does not exist.
.0100bb	85 08		sta $08				sta 	DTemp1 						; make this the one we are checking.
.0100bd	a0 02 00	ldy #$0002			ldy 	#2 							; get the address of the string into DTemp2
.0100c0	b1 08		lda ($08),y			lda 	(DTemp1),y
.0100c2	85 0c		sta $0c				sta 	DTemp2
.0100c4	a0 00 00	ldy #$0000			ldy 	#0
.0100c7					_FVCompare:
.0100c7	b1 06		lda ($06),y			lda 	(DCodePtr),y 				; compare the two tokens
.0100c9	d1 0c		cmp ($0c),y			cmp 	(DTemp2),y
.0100cb	d0 ea		bne $0100b7			bne 	_FVNext 					; if they are different, go to the next list entry.
.0100cd	c8		iny				iny 								; advance token pointer by 2
.0100ce	c8		iny				iny
.0100cf	29 00 20	and #$2000			and 	#$2000 						; check the continuation bit.
.0100d2	d0 f3		bne $0100c7			bne 	_FVCompare 					; if set, then try the next two tokens, clear = match.
.0100d4	b2 06		lda ($06)			lda 	(DCodePtr)					; push the first token on the stack
.0100d6	48		pha				pha
.0100d7	98		tya				tya 								; Y is the amount to advance it by.
.0100d8	18		clc				clc
.0100d9	65 06		adc $06				adc 	DCodePtr
.0100db	85 06		sta $06				sta 	DCodePtr
.0100dd	68		pla				pla 								; restore first token
.0100de	29 00 08	and #$0800			and 	#$0800 						; is it an array.
.0100e1	d0 0c		bne $0100ef			bne 	_FVIndexed 					; if so, need to calculate and apply the index.
.0100e3	a5 08		lda $08				lda 	DTemp1 						; copy current record + 6 to DVariableDataAddress
.0100e5	18		clc				clc
.0100e6	69 06 00	adc #$0006			adc 	#6
.0100e9	85 1e		sta $1e				sta 	DVariableDataAddress
.0100eb	18		clc				clc 								; return with carry clear.
.0100ec	60		rts				rts
.0100ed					_FVFail:
.0100ed	38		sec				sec
.0100ee	60		rts				rts
.0100ef					_FVIndexed:
.0100ef	a5 08		lda $08				lda 	DTemp1 						; address of the array record
.0100f1	48		pha				pha 								; save on stack
.0100f2	20 25 03	jsr $010325			jsr 	EvaluateNextInteger 		; this is the index.
.0100f5	c0 00 00	cpy #$0000			cpy 	#0 							; fail if upper word non zero.
.0100f8	d0 08		bne $010102			bne 	_FVIndexFail
.0100fa	7a		ply				ply 								; array record into Y.
.0100fb	d9 04 00	cmp $0004,y			cmp 	$0004,y 					; compare index vs highest index
.0100fe	90 15		bcc $010115			bcc 	_FVIndexOkay 				; if index <= highest it's okay.
.010100	f0 13		beq $010115			beq 	_FVIndexOkay
.010102					_FVIndexFail:
.010102	20 45 01	jsr $010145			jsr 	ReportError 				; bad index.
>010105	42 61 64 20 41 72 72 61				.text	"Bad Array Index",0
>01010d	79 20 49 6e 64 65 78 00
.010115					_FVIndexOkay:
.010115	0a		asl a				asl 	a 							; multiply the index by 4
.010116	0a		asl a				asl 	a 							; also clearing the carry.
.010117	84 08		sty $08				sty 	DTemp1 						; add the address record
.010119	65 08		adc $08				adc 	DTemp1
.01011b	69 06 00	adc #$0006			adc 	#6 							; add 6 for the header
.01011e	85 1e		sta $1e				sta 	DVariableDataAddress
.010120	a9 19 3c	lda #$3c19			lda 	#rparenTokenID 				; check for )
.010123	20 4d 01	jsr $01014d			jsr 	CheckNextToken
.010126	18		clc				clc 								; return with carry clear
.010127	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010128					IllegalToken:
.010128	20 45 01	jsr $010145			jsr 	ReportError
>01012b	42 61 64 20 74 6f 6b 65				.text 	"Bad token",0
>010133	6e 00
.010135					SyntaxError:
.010135	20 45 01	jsr $010145			jsr 	ReportError
>010138	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>010140	72 72 6f 72 00
.010145					ReportError:
.010145	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010147	ea		nop				nop
.010148	80 fb		bra $010145			bra 	ReportError
.01014a					CheckNextComma:
.01014a	a9 15 3c	lda #$3c15			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01014d					CheckNextToken:
.01014d	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01014f	d0 05		bne $010156			bne 	_CTKError					; error if not
.010151	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010153	e6 06		inc $06				inc 	DCodePtr
.010155	60		rts				rts
.010156					_CTKError:
.010156	20 45 01	jsr $010145			jsr 	ReportError
>010159	4d 69 73 73 69 6e 67 20				.text	"Missing token",0
>010161	74 6f 6b 65 6e 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010167					StringTempAllocate:
.010167	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01016a	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01016d	18		clc				clc 								; this adds one, for the length.
.01016e	65 18		adc $18				adc 	DTempStringPtr
.010170	85 18		sta $18				sta 	DTempStringPtr
.010172	48		pha				pha
.010173	a9 00 00	lda #$0000			lda 	#$0000
.010176	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010178	92 18		sta ($18)			sta		(DTempStringPtr)
.01017a	c2 20		rep #$20			rep 	#$20
.01017c	68		pla				pla
.01017d	85 1a		sta $1a				sta 	DStartTempString 			; start of temporary string.
.01017f	85 1c		sta $1c				sta 	DCurrentTempString 			; save current temporary string
.010181	e6 1c		inc $1c				inc 	DCurrentTempString 			; step over length byte.
.010183	60		rts				rts
.010184					StringCreateCopy:
.010184	a8		tay				tay 								; put pointer to string in Y
.010185	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010188	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01018b	f0 17		beq $0101a4			beq 	_SCCExit 					; do nothing if length zero.
.01018d	da		phx				phx 								; save X and put the character count in X
.01018e	aa		tax				tax
.01018f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010191					_SCCCopy:
.010191	c8		iny				iny 								; advance and read (first time skips length)
.010192	b9 00 00	lda $0000,y			lda 	$0000,y
.010195	92 1c		sta ($1c)			sta 	(DCurrentTempString) 		; write into target
.010197	e6 1c		inc $1c				inc 	DCurrentTempString 			; bump target pointer
.010199	b2 1a		lda ($1a)			lda 	(DStartTempString)			; one more character
.01019b	1a		inc a				inc 	a
.01019c	92 1a		sta ($1a)			sta 	(DStartTempString)
.01019e	ca		dex				dex 								; do X times
.01019f	d0 f0		bne $010191			bne 	_SCCCopy
.0101a1	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0101a3	fa		plx				plx
.0101a4					_SCCExit:
.0101a4	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101a5					EvaluateReset:
.0101a5	a0 72 00	ldy #$0072			ldy 	#BlockHighMemoryPtr 		; reset temp store pointer, start at high memory.
.0101a8	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0101aa	38		sec				sec 								; allocate 256 bytes down. This gives clear space to
.0101ab	e9 00 01	sbc #$0100			sbc 	#256 						; 'concrete' a string later on as must be 255 chars or less
.0101ae	85 18		sta $18				sta 	DTempStringPtr 				; store as temporary string pointer start address.
.0101b0	60		rts				rts
.0101b1					Evaluate:
.0101b1	a2 00 01	ldx #$0100			ldx 	#EXSBase					; reset the stack base
.0101b4	a9 00 00	lda #$0000			lda 	#0<<9 						; current precedence level, which is the lowest
.0101b7					EvaluateLevel:
.0101b7	95 20		sta $20,x			sta 	EXSPrecType+0,x 				; save precedence level, also sets type to integer.
.0101b9	b2 06		lda ($06)			lda 	(DCodePtr)						; look at the next token
.0101bb	f0 0e		beq $0101cb			beq 	_ELExpressionSyntax 			; EOL token, there's an error.
.0101bd	30 2d		bmi $0101ec			bmi 	_ELConstant 					; 8000-FFFF constant.
.0101bf	c9 00 10	cmp #$1000			cmp 	#$1000 							; string constant ? 00xx
.0101c2	90 0a		bcc $0101ce			bcc 	_ELStringConstant
.0101c4	c9 00 20	cmp #$2000			cmp 	#$2000 							; constant shift ? 1xxx
.0101c7	90 1d		bcc $0101e6			bcc 	_ELConstantShift
.0101c9	80 7d		bra $010248			bra 	_ELKeywordFunction 				; must be 2000-7FFF e.g. identifier or keyword.
.0101cb					_ELExpressionSyntax:
.0101cb	4c 35 01	jmp $010135			jmp 	SyntaxError
.0101ce					_ELStringConstant:
.0101ce	a5 06		lda $06				lda 	DCodePtr 						; get the address of the token
.0101d0	1a		inc a				inc 	a 								; adding 2 goes to the start of the string (len byte)
.0101d1	1a		inc a				inc 	a
.0101d2	95 00		sta $00,x			sta 	EXSValueL+0,x 					; the LSB of the string.
.0101d4	74 10		stz $10,x			stz 	EXSValueH+0,x 					; the MSB is always zero.
.0101d6	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; make type string
.0101d8	09 00 80	ora #$8000			ora 	#$8000
.0101db	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101dd	18		clc				clc
.0101de	b2 06		lda ($06)			lda 	(DCodePtr) 						; add length to pointer to skip over
.0101e0	65 06		adc $06				adc 	DCodePtr
.0101e2	85 06		sta $06				sta 	DCodePtr
.0101e4	80 1b		bra $010201			bra 	_ELGotAtom
.0101e6					_ELConstantShift:
.0101e6	85 12		sta $12				sta 	DConstantShift 					; update constant shift
.0101e8	e6 06		inc $06				inc 	DCodePtr 						; shift over constant shift
.0101ea	e6 06		inc $06				inc 	DCodePtr 						; fall through to constant code.
.0101ec					_ELConstant:
.0101ec	b2 06		lda ($06)			lda 	(DCodePtr)						; get the token (for fall through)
.0101ee	0a		asl a				asl 	a 								; shift left, also gets rid of the high bit
.0101ef	95 00		sta $00,x			sta 	EXSValueL+0,x 					; this is the low word
.0101f1	a5 12		lda $12				lda 	DConstantShift 					; get the constant shift
.0101f3	29 ff 0f	and #$0fff			and 	#$0FFF 							; mask off bits 12-15
.0101f6	4a		lsr a				lsr 	a 								; rotate bit 0 into carry
.0101f7	95 10		sta $10,x			sta 	EXSValueH+0,x 					; this is the high word
.0101f9	76 00		ror $00,x			ror 	EXSValueL+0,x 					; rotate carry into the low word
.0101fb	64 12		stz $12				stz 	DConstantShift 					; reset the constant shift to zero.
.0101fd	e6 06		inc $06				inc 	DCodePtr 						; skip over code pointer
.0101ff	e6 06		inc $06				inc 	DCodePtr
.010201					_ELGotAtom:
.010201	b2 06		lda ($06)			lda 	(DCodePtr)						; get the next token.
.010203	a8		tay				tay 									; save in Y, temporarily.
.010204	29 00 f0	and #$f000			and 	#$F000 							; is it a binary operator keyword, 0010 tttx xxxx xxxx
.010207	c9 00 20	cmp #$2000			cmp 	#$2000
.01020a	d0 34		bne $010240			bne 	_ELExit 						; no, exit.
.01020c	b5 20		lda $20,x			lda 	EXSPrecType,X 					; get current precedence level
.01020e	29 ff 7f	and #$7fff			and 	#$7FFF 							; remove the type bit, so it's the actual level.
.010211	85 08		sta $08				sta 	DTemp1 							; save it.
.010213	98		tya				tya 									; get token back
.010214	29 00 1e	and #$1e00			and 	#15<<9 							; mask out the precedence data.
.010217	c5 08		cmp $08				cmp 	DTemp1 							; compare against current level
.010219	90 25		bcc $010240			bcc 	_ELExit 						; if too low, then exit this level
.01021b	5a		phy				phy 									; save operator token on stack.
.01021c	e6 06		inc $06				inc 	DCodePtr 						; skip over it
.01021e	e6 06		inc $06				inc 	DCodePtr
.010220	18		clc				clc 									; precedence data still in A, add 1 level to it
.010221	69 00 02	adc #$0200			adc 	#1<<9
.010224	e8		inx				inx 									; calculate the RHS at the next stack level.
.010225	e8		inx				inx
.010226	20 b7 01	jsr $0101b7			jsr 	EvaluateLevel
.010229	ca		dex				dex
.01022a	ca		dex				dex
.01022b	68		pla				pla 									; get operator token back
.01022c					_ELExecuteA:
.01022c	29 ff 01	and #$01ff			and 	#$01FF 							; keyword ID.
.01022f	0a		asl a				asl 	a 								; double it as keyword vector table is word data
.010230	9b		txy				txy 									; save X in Y
.010231	aa		tax				tax 									; double keyword ID in X
.010232	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 				; this is the vector address
.010236	bb		tyx				tyx 									; restore X.
.010237	8f 3c 02 01	sta $01023c			sta 	_ELCallRoutine+1 				; Self modifying, will not work in ROM.
.01023b					_ELCallRoutine:
.01023b	20 3b 02	jsr $01023b			jsr 	_ELCallRoutine 					; call the new address.
.01023e	80 c1		bra $010201			bra 	_ELGotAtom 						; go round operator level again.
.010240					_ELExit:
.010240	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; put bit 15 - type bit - in carry flag
.010242	0a		asl a				asl 	a
.010243	b5 00		lda $00,x			lda 	EXSValueL+0,x 					; put value in YA
.010245	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010247	60		rts				rts
.010248					_ELKeywordFunction:
.010248	c9 00 40	cmp #$4000			cmp 	#$4000 							; identifier (e.g. variable) if in range $4000-$7FFF
.01024b	b0 1a		bcs $010267			bcs 	_ELVariable 					; (we've already discounted 8000-FFFF)
.01024d	c9 0b 24	cmp #$240b			cmp 	#minusTokenID 					; special case keywords -(atom) (expression)
.010250	f0 4e		beq $0102a0			beq 	_ELMinusAtom
.010252	c9 18 3c	cmp #$3c18			cmp 	#lparenTokenID
.010255	f0 31		beq $010288			beq 	_ELParenthesis
.010257	a8		tay				tay 									; save token in Y
.010258	29 00 fe	and #$fe00			and 	#$FE00 							; look for 0011 101x ? i.e. a unary function.
.01025b	c9 00 3a	cmp #$3a00			cmp 	#$3A00 							; if it isn't then exit
.01025e	d0 e0		bne $010240			bne 	_ELExit
.010260					_ELUnaryFunction:
.010260	e6 06		inc $06				inc 	DCodePtr 						; skip over the unary function token, which is in Y
.010262	e6 06		inc $06				inc 	DCodePtr
.010264	98		tya				tya 									; get token back
.010265	80 c5		bra $01022c			bra 	_ELExecuteA 					; and execute it using the lower 9 bits of the token.
.010267					_ELVariable:
.010267	b2 06		lda ($06)			lda 	(DCodePtr)						; get first token
.010269	48		pha				pha 									; save on stack.
.01026a	20 86 00	jsr $010086			jsr 	FindVariable 					; does the variable exist ?
.01026d	b0 51		bcs $0102c0			bcs 	_ELUnknownVariable				; if not, goto error.
.01026f	b2 1e		lda ($1e)			lda 	(DVariableDataAddress) 			; copy value into expression stack
.010271	95 00		sta $00,x			sta 	EXSValueL+0,x
.010273	a0 02 00	ldy #$0002			ldy 	#2
.010276	b1 1e		lda ($1e),y			lda 	(DVariableDataAddress),y
.010278	95 10		sta $10,x			sta 	EXSValueH+0,x
.01027a	68		pla				pla 									; get the first token back off the stack.
.01027b	29 00 10	and #$1000			and 	#$1000 							; non-zero if it is a string.
.01027e	16 20		asl $20,x			asl 	EXSPrecType+0,x 				; shift the prectype left
.010280	69 00 ff	adc #$ff00			adc 	#$FF00 							; put string bit into the carry bit
.010283	76 20		ror $20,x			ror 	EXSPrecType+0,x 				; rotate the string bit in.
.010285	82 79 ff	brl $010201			brl 	_ELGotAtom
.010288					_ELParenthesis:
.010288	e6 06		inc $06				inc 	DCodePtr 						; skip over the ( token
.01028a	e6 06		inc $06				inc 	DCodePtr
.01028c	20 01 03	jsr $010301			jsr 	EvaluateNext 					; calculate the value in parenthesis, using next space on the stack.
.01028f	a9 19 3c	lda #$3c19			lda 	#rparenTokenID 					; check for ) which should close the parenthesised expression.
.010292	20 4d 01	jsr $01014d			jsr 	CheckNextToken
.010295	b5 02		lda $02,x			lda 	EXSValueL+2,x 					; copy the value in directly from level 2 to level 0.
.010297	95 00		sta $00,x			sta 	EXSValueL+0,x
.010299	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01029b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01029d	82 61 ff	brl $010201			brl 	_ELGotAtom 						; and go round looking for the next binary operator
.0102a0					_ELMinusAtom:
.0102a0	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.0102a2	e6 06		inc $06				inc 	DCodePtr
.0102a4	e8		inx				inx 									; make space
.0102a5	e8		inx				inx
.0102a6	a9 00 10	lda #$1000			lda 	#8<<9 							; means binary operation will be impossible.
.0102a9	20 b7 01	jsr $0101b7			jsr 	EvaluateLevel 					; we just want the next atom. (does allow -(xxx))
.0102ac	ca		dex				dex
.0102ad	ca		dex				dex
.0102ae	38		sec				sec 									; do the subtraction 0-result to negate it.
.0102af	a9 00 00	lda #$0000			lda 	#0
.0102b2	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102b4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102b6	a9 00 00	lda #$0000			lda 	#0
.0102b9	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102bb	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102bd	4c 01 02	jmp $010201			jmp 	_ELGotAtom
.0102c0					_ELUnknownVariable:
.0102c0	20 45 01	jsr $010145			jsr 	ReportError
>0102c3	55 6e 64 65 63 6c 61 72				.text	"Undeclared variable",0
>0102cb	65 64 20 76 61 72 69 61 62 6c 65 00
.0102d7					CheckBothNumeric:
.0102d7	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; check bit 15 of both types are zero
.0102d9	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0102db	30 01		bmi $0102de			bmi 	_CNError
.0102dd	60		rts				rts
.0102de					_CNError:
.0102de	20 45 01	jsr $010145			jsr 	ReportError
>0102e1	4e 75 6d 65 72 69 63 20				.text	"Numeric values expected",0
>0102e9	76 61 6c 75 65 73 20 65 78 70 65 63 74 65 64 00
.0102f9					ResetTypeInteger:
.0102f9	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; clear bit 15 of type, forcing an integer return.
.0102fb	29 ff 7f	and #$7fff			and 	#$7FFF
.0102fe	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010300	60		rts				rts
.010301					EvaluateNext:
.010301	e8		inx				inx 									; stack forward
.010302	e8		inx				inx
.010303	a9 00 00	lda #$0000			lda 	#0<<9 							; lowest precedence.
.010306	20 b7 01	jsr $0101b7			jsr 	EvaluateLevel 					; do at next level
.010309	ca		dex				dex 									; reset stack
.01030a	ca		dex				dex
.01030b	60		rts				rts
.01030c					EvaluateInteger:
.01030c	20 b1 01	jsr $0101b1			jsr 	Evaluate
.01030f	b0 01		bcs $010312			bcs 	EIType
.010311	60		rts				rts
.010312					EIType:
.010312	20 45 01	jsr $010145			jsr 	ReportError
>010315	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00
>01031d	78 70 65 63 74 65 64 00
.010325					EvaluateNextInteger:
.010325	20 01 03	jsr $010301			jsr 	EvaluateNext
.010328	b0 e8		bcs $010312			bcs 	EIType
.01032a	60		rts				rts
.01032b					EvaluateString:
.01032b	20 b1 01	jsr $0101b1			jsr 	Evaluate
.01032e	90 01		bcc $010331			bcc 	ESType
.010330	60		rts				rts
.010331					ESType:
.010331	20 45 01	jsr $010145			jsr 	ReportError
>010334	53 74 72 69 6e 67 20 65				.text 	"String expected",$00
>01033c	78 70 65 63 74 65 64 00
.010344					EvaluateNextString:
.010344	20 01 03	jsr $010301			jsr 	EvaluateNext
.010347	90 e8		bcc $010331			bcc 	ESType
.010349	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.01034a					Binary_Add:
.01034a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01034c	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01034e	30 12		bmi $010362		bmi 	_BATypeError
.010350	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010352	30 3f		bmi $010393		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010354	18		clc			clc
.010355	b5 00		lda $00,x		lda		EXSValueL+0,x
.010357	75 02		adc $02,x		adc 	EXSValueL+2,x
.010359	95 00		sta $00,x		sta 	EXSValueL+0,x
.01035b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01035d	75 12		adc $12,x		adc 	EXSValueH+2,x
.01035f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010361	60		rts			rts
.010362					_BATypeError:
.010362	20 45 01	jsr $010145		jsr 	ReportError
>010365	2b 20 6f 70 65 72 61 74			.text 	"+ operator can't mix types",$00
>01036d	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01037d	65 73 00
.010380					_BALengthError:
.010380	20 45 01	jsr $010145		jsr 	ReportError
>010383	53 74 72 69 6e 67 20 74			.text 	"String too long",$00
>01038b	6f 6f 20 6c 6f 6e 67 00
.010393					_BAConcatenateString:
.010393	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010395	85 08		sta $08			sta 	DTemp1
.010397	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010399	85 0c		sta $0c			sta 	DTemp2
.01039b	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01039d	18		clc			clc 										; work out the total length
.01039e	b2 08		lda ($08)		lda 	(DTemp1)
.0103a0	72 0c		adc ($0c)		adc 	(DTemp2)
.0103a2	b0 14		bcs $0103b8		bcs 	_BAConcatLengthError 				; string is too long.
.0103a4	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0103a6	20 67 01	jsr $010167		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0103a9	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0103ab	74 10		stz $10,x		stz 	EXSValueH+0,x
.0103ad	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0103af	20 84 01	jsr $010184		jsr 	StringCreateCopy
.0103b2	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0103b4	20 84 01	jsr $010184		jsr 	StringCreateCopy
.0103b7	60		rts			rts
.0103b8					_BAConcatLengthError:
.0103b8	20 45 01	jsr $010145		jsr 	ReportError
>0103bb	53 74 72 69 6e 67 20 74			.text 	"String too long",0
>0103c3	6f 6f 20 6c 6f 6e 67 00
.0103cb					Binary_Subtract:
.0103cb	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.0103ce	38		sec			sec
.0103cf	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103d1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0103d3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103d5	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103d7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0103d9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103db	60		rts			rts
.0103dc					Binary_ShiftRight:
.0103dc	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.0103df	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0103e1	29 3f 00	and #$003f		and 	#63
.0103e4	f0 07		beq $0103ed		beq		_Binary_SRExit
.0103e6					_Binary_SRLoop:
.0103e6	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0103e8	76 00		ror $00,x		ror 	EXSValueL+0,x
.0103ea	3a		dec a			dec 	a
.0103eb	d0 f9		bne $0103e6		bne 	_Binary_SRLoop
.0103ed					_Binary_SRExit:
.0103ed	60		rts			rts
.0103ee					Binary_ShiftLeft:
.0103ee	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.0103f1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0103f3	29 3f 00	and #$003f		and 	#63
.0103f6	f0 07		beq $0103ff		beq		_Binary_SLExit
.0103f8					_Binary_SLLoop:
.0103f8	16 00		asl $00,x		asl 	EXSValueL+0,x
.0103fa	36 10		rol $10,x		rol 	EXSValueH+0,x
.0103fc	3a		dec a			dec 	a
.0103fd	d0 f9		bne $0103f8		bne 	_Binary_SLLoop
.0103ff					_Binary_SLExit:
.0103ff	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010400					Binary_And:
.010400	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.010403	b5 00		lda $00,x		lda		EXSValueL+0,x
.010405	35 02		and $02,x		and 	EXSValueL+2,x
.010407	95 00		sta $00,x		sta 	EXSValueL+0,x
.010409	b5 10		lda $10,x		lda		EXSValueH+0,x
.01040b	35 12		and $12,x		and 	EXSValueH+2,x
.01040d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01040f	60		rts			rts
.010410					Binary_Or:
.010410	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.010413	b5 00		lda $00,x		lda		EXSValueL+0,x
.010415	15 02		ora $02,x		ora 	EXSValueL+2,x
.010417	95 00		sta $00,x		sta 	EXSValueL+0,x
.010419	b5 10		lda $10,x		lda		EXSValueH+0,x
.01041b	15 12		ora $12,x		ora 	EXSValueH+2,x
.01041d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01041f	60		rts			rts
.010420					Binary_Xor:
.010420	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.010423	b5 00		lda $00,x		lda		EXSValueL+0,x
.010425	55 02		eor $02,x		eor 	EXSValueL+2,x
.010427	95 00		sta $00,x		sta 	EXSValueL+0,x
.010429	b5 10		lda $10,x		lda		EXSValueH+0,x
.01042b	55 12		eor $12,x		eor 	EXSValueH+2,x
.01042d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01042f	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010430					Binary_Equals:
.010430	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010433	b0 0e		bcs $010443		bcs 	_BEString
.010435	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010437	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010439	d0 4f		bne $01048a		bne 	Compare_Fail
.01043b	b5 10		lda $10,x		lda 	EXSValueH,x
.01043d	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01043f	d0 49		bne $01048a		bne 	Compare_Fail
.010441	80 3f		bra $010482		bra 	Compare_Succeed
.010443					_BEString:
.010443	09 00 00	ora #$0000		ora 	#$0000
.010446	f0 3a		beq $010482		beq 	Compare_Succeed
.010448	80 40		bra $01048a		bra 	Compare_Fail
.01044a					Binary_NotEquals:
.01044a	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01044d	b0 0e		bcs $01045d		bcs 	_BNEString
.01044f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010451	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010453	d0 2d		bne $010482		bne 	Compare_Succeed
.010455	b5 10		lda $10,x		lda 	EXSValueH,x
.010457	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010459	d0 27		bne $010482		bne 	Compare_Succeed
.01045b	80 2d		bra $01048a		bra 	Compare_Fail
.01045d					_BNEString:
.01045d	09 00 00	ora #$0000		ora 	#$0000
.010460	d0 20		bne $010482		bne 	Compare_Succeed
.010462	80 26		bra $01048a		bra 	Compare_Fail
.010464					Binary_Less:
.010464	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010467	b0 12		bcs $01047b		bcs 	_BLString
.010469	38		sec			sec
.01046a	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01046c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01046e	b5 10		lda $10,x		lda 	EXSValueH,x
.010470	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010472	50 03		bvc $010477		bvc 	*+5
.010474	49 00 80	eor #$8000		eor 	#$8000
.010477	30 09		bmi $010482		bmi 	Compare_Succeed
.010479	80 0f		bra $01048a		bra 	Compare_Fail
.01047b					_BLString:
.01047b	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01047e	f0 02		beq $010482		beq 	Compare_Succeed
.010480	80 08		bra $01048a		bra 	Compare_Fail
.010482					Compare_Succeed:
.010482	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010485	95 00		sta $00,x		sta 	EXSValueL,x
.010487	95 10		sta $10,x		sta 	EXSValueH,x
.010489	60		rts			rts
.01048a					Compare_Fail:
.01048a	74 00		stz $00,x		stz 	EXSValueL,x
.01048c	74 10		stz $10,x		stz 	EXSValueH,x
.01048e	60		rts			rts
.01048f					Binary_GreaterEqual:
.01048f	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010492	b0 12		bcs $0104a6		bcs 	_BGEString
.010494	38		sec			sec
.010495	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010497	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010499	b5 10		lda $10,x		lda 	EXSValueH,x
.01049b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01049d	50 03		bvc $0104a2		bvc 	*+5
.01049f	49 00 80	eor #$8000		eor 	#$8000
.0104a2	10 de		bpl $010482		bpl 	Compare_Succeed
.0104a4	80 e4		bra $01048a		bra 	Compare_Fail
.0104a6					_BGEString:
.0104a6	09 00 00	ora #$0000		ora 	#$0000
.0104a9	10 d7		bpl $010482		bpl 	Compare_Succeed
.0104ab	80 dd		bra $01048a		bra 	Compare_Fail
.0104ad					Binary_LessEqual:
.0104ad	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104b0	b0 12		bcs $0104c4		bcs 	_BLEString
.0104b2	18		clc			clc 									; numeric <= signed
.0104b3	b5 00		lda $00,x		lda 	EXSValueL,x
.0104b5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104b7	b5 10		lda $10,x		lda 	EXSValueH,x
.0104b9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104bb	50 03		bvc $0104c0		bvc 	*+5
.0104bd	49 00 80	eor #$8000		eor 	#$8000
.0104c0	30 c0		bmi $010482		bmi 	Compare_Succeed
.0104c2	80 c6		bra $01048a		bra 	Compare_Fail
.0104c4					_BLEString:
.0104c4	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0104c7	d0 b9		bne $010482		bne 	Compare_Succeed
.0104c9	80 bf		bra $01048a		bra 	Compare_Fail
.0104cb					Binary_Greater:
.0104cb	20 e9 04	jsr $0104e9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104ce	b0 12		bcs $0104e2		bcs 	_BGString
.0104d0	18		clc			clc 									; numeric > signed
.0104d1	b5 00		lda $00,x		lda 	EXSValueL,x
.0104d3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104d5	b5 10		lda $10,x		lda 	EXSValueH,x
.0104d7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104d9	50 03		bvc $0104de		bvc 	*+5
.0104db	49 00 80	eor #$8000		eor 	#$8000
.0104de	10 a2		bpl $010482		bpl 	Compare_Succeed
.0104e0	80 a8		bra $01048a		bra 	Compare_Fail
.0104e2					_BGString:
.0104e2	c9 01 00	cmp #$0001		cmp 	#$0001
.0104e5	f0 9b		beq $010482		beq 	Compare_Succeed
.0104e7	80 a1		bra $01048a		bra 	Compare_Fail
.0104e9					CompareTypeCheck:
.0104e9	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0104eb	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104ed	30 06		bmi $0104f5		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0104ef	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0104f1	30 22		bmi $010515		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0104f3	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0104f4	60		rts			rts
.0104f5					_CTCFail:
.0104f5	20 45 01	jsr $010145		jsr 	ReportError
>0104f8	43 6f 6d 70 61 72 69 73			.text 	"Comparison must be same type",$00
>010500	6f 6e 20 6d 75 73 74 20 62 65 20 73 61 6d 65 20
>010510	74 79 70 65 00
.010515					_CTCStringCompare:
.010515	20 f9 02	jsr $0102f9		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010518	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01051a	85 08		sta $08			sta 	DTemp1
.01051c	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01051e	85 0c		sta $0c			sta 	DTemp2
.010520	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010523	a8		tay			tay
.010524	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010526	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010528	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01052a	90 02		bcc $01052e		bcc 	_CTCSmallest
.01052c	b2 0c		lda ($0c)		lda 	(DTemp2)
.01052e					_CTCSmallest:
.01052e	85 10		sta $10			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010530					_CTCCompare:
.010530	c8		iny			iny 									; look at next character (done first, first char is size)
.010531	c6 10		dec $10			dec 	DSignCount 						; decrement counter
.010533	30 16		bmi $01054b		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010535	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010537	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010539	f0 f5		beq $010530		beq 	_CTCCompare 					; if zero, try the next character.
.01053b	b0 07		bcs $010544		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01053d					_CTCLess:
.01053d	c2 20		rep #$20		rep 	#$20
.01053f	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010542	80 14		bra $010558		bra 	_CTCExit
.010544					_CTCGreater:
.010544	c2 20		rep #$20		rep 	#$20
.010546	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010549	80 0d		bra $010558		bra 	_CTCExit
.01054b					_CTCEqualSoFar:
.01054b	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01054d	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01054f	90 ec		bcc $01053d		bcc 	_CTCLess
.010551	d0 f1		bne $010544		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010553	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010555	a9 00 00	lda #$0000		lda 	#$0000
.010558					_CTCExit:
.010558	38		sec			sec 									; return with CS indicating string comparison.
.010559	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.01055a					Binary_Divide:
.01055a	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.01055d	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01055f	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010561	d0 14		bne $010577		bne 	_BinaryDivide_Ok
.010563	20 45 01	jsr $010145		jsr 	ReportError							; error if so.
>010566	44 69 76 69 73 69 6f 6e			.text	"Division by zero",$00
>01056e	20 62 79 20 7a 65 72 6f 00
.010577					_BinaryDivide_Ok:
.010577	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010579	64 0a		stz $0a			stz 	DTemp1+2
.01057b	64 10		stz $10			stz 	DSignCount  						; zero sign count.
.01057d	5a		phy			phy 										; save Y (bit counter)
.01057e	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010580	10 07		bpl $010589		bpl 	_BinaryDivide_RightDone
.010582	e8		inx			inx
.010583	e8		inx			inx
.010584	20 bf 05	jsr $0105bf		jsr 	Binary_DivNegate
.010587	ca		dex			dex
.010588	ca		dex			dex
.010589					_BinaryDivide_RightDone:
.010589	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01058b	10 03		bpl $010590		bpl 	_BinaryDivide_LeftDone
.01058d	20 bf 05	jsr $0105bf		jsr 	Binary_DivNegate
.010590					_BinaryDivide_LeftDone:
.010590	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010593					_BinaryDivide_Loop:
.010593	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010595	36 10		rol $10,x		rol 	EXSValueH+0,x
.010597	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010599	26 0a		rol $0a			rol 	DTemp1+2
.01059b	38		sec			sec											; calculate A-M
.01059c	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01059e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a0	85 0c		sta $0c			sta 	DTemp2
.0105a2	a5 0a		lda $0a			lda 	DTemp1+2
.0105a4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a6	90 08		bcc $0105b0		bcc 	_Binary_NoSubract 					; if A < M skip this
.0105a8	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0105aa	a5 0c		lda $0c			lda 	DTemp2
.0105ac	85 08		sta $08			sta 	DTemp1+0
.0105ae	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0105b0					_Binary_NoSubract:
.0105b0	88		dey			dey 										; do it 32 times.
.0105b1	d0 e0		bne $010593		bne 	_BinaryDivide_Loop
.0105b3					_BinaryDivide_Exit:
.0105b3	a5 10		lda $10			lda 	DSignCount 							; restore sign
.0105b5	29 01 00	and #$0001		and 	#1
.0105b8	f0 03		beq $0105bd		beq 	_BinaryDivide_Exit2
.0105ba	20 bf 05	jsr $0105bf		jsr 	Binary_DivNegate
.0105bd					_BinaryDivide_Exit2:
.0105bd	7a		ply			ply 										; restore Y
.0105be	60		rts			rts
.0105bf					Binary_DivNegate:
.0105bf	e6 10		inc $10			inc 	DSignCount 							; increment the count of signs.
.0105c1	38		sec			sec 										; negate the value at stack X.
.0105c2	a9 00 00	lda #$0000		lda 	#$0000
.0105c5	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0105c7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c9	a9 00 00	lda #$0000		lda 	#$0000
.0105cc	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0105ce	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105d0	60		rts			rts
.0105d1					Binary_Modulus:
.0105d1	20 5a 05	jsr $01055a		jsr 	Binary_Divide 						; do the divide
.0105d4	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0105d6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105d8	a5 0a		lda $0a			lda 	DTemp1+2
.0105da	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105dc	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0105dd					Binary_Multiply:
.0105dd	20 d7 02	jsr $0102d7		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e0	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0105e2	85 08		sta $08			sta 	DTemp1
.0105e4	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0105e6	85 0a		sta $0a			sta		DTemp1+2
.0105e8	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0105ea	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105ec					_BinaryMultiply_Loop:
.0105ec	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0105ee	05 0a		ora $0a			ora 	DTemp1+2
.0105f0	f0 1e		beq $010610		beq 	_BinaryMultiply_Exit
.0105f2	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0105f4	29 01 00	and #$0001		and 	#1
.0105f7	f0 0d		beq $010606		beq 	_BinaryMultiply_NoAdd
.0105f9	18		clc			clc 										; add multiplicand to result.
.0105fa	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0105fc	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105fe	95 00		sta $00,x		sta 	EXSValueL+0,x
.010600	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010602	75 12		adc $12,x		adc 	EXSValueH+2,x
.010604	95 10		sta $10,x		sta 	EXSValueH+0,x
.010606					_BinaryMultiply_NoAdd:
.010606	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010608	66 08		ror $08			ror 	DTemp1
.01060a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01060c	36 12		rol $12,x		rol 	EXSValueH+2,x
.01060e	80 dc		bra $0105ec		bra 	_BinaryMultiply_Loop 				; go round again.
.010610					_BinaryMultiply_Exit:
.010610	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010611					Function_Len:
.010611	20 f9 02	jsr $0102f9			jsr 	ResetTypeInteger 			; returns an integer
.010614	20 44 03	jsr $010344			jsr 	EvaluateNextString 			; get the value you are absoluting
.010617	a9 19 3c	lda #$3c19			lda 	#RParenTokenID 				; check )
.01061a	20 4d 01	jsr $01014d			jsr 	CheckNextToken
.01061d	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01061f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010622	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010625	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010627	74 10		stz $10,x			stz 	EXSValueH+0,x
.010629	60		rts				rts
.01062a					Function_Abs:
.01062a	20 f9 02	jsr $0102f9			jsr 	ResetTypeInteger 			; returns an integer
.01062d	20 25 03	jsr $010325			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010630	a9 19 3c	lda #$3c19			lda 	#RParenTokenID 				; check )
.010633	20 4d 01	jsr $01014d			jsr 	CheckNextToken
.010636	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010638	30 07		bmi $010641			bmi 	_FAbsNegative 				; negate it if negative
.01063a	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01063c	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01063e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010640	60		rts				rts
.010641					_FAbsNegative:
.010641	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010642	a9 00 00	lda #$0000			lda 	#0
.010645	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010647	95 00		sta $00,x			sta 	EXSValueL+0,x
.010649	a9 00 00	lda #$0000			lda 	#0
.01064c	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01064e	95 10		sta $10,x			sta 	EXSValueH+0,x
.010650	60		rts				rts
.010651					Function_Sgn:
.010651	20 f9 02	jsr $0102f9			jsr 	ResetTypeInteger 			; returns integer
.010654	20 25 03	jsr $010325			jsr 	EvaluateNextInteger 		; get an integer
.010657	a9 19 3c	lda #$3c19			lda 	#RParenTokenID 				; check )
.01065a	20 4d 01	jsr $01014d			jsr 	CheckNextToken
.01065d	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01065f	74 10		stz $10,x			stz 	EXSValueH+0,x
.010661	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010663	30 07		bmi $01066c			bmi 	_FSgnNegative 				; set to -1 if signed
.010665	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010667	f0 02		beq $01066b			beq 	_FSgnExit
.010669	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01066b					_FSgnExit:
.01066b	60		rts				rts
.01066c					_FSgnNegative:
.01066c	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01066f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010671	95 10		sta $10,x			sta 	EXSValueH+0,x
.010673	60		rts				rts
.010674					Function_Random:
.010674	20 f9 02	jsr $0102f9			jsr 	ResetTypeInteger
.010677	a5 14		lda $14				lda 	DRandom 					; check for non-zero
.010679	05 16		ora $16				ora 	DRandom+2 					; they don't like these :)
.01067b	d0 0a		bne $010687			bne 	_Rnd_NotZero
.01067d	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010680	85 14		sta $14				sta 	DRandom
.010682	a9 ea 00	lda #$00ea			lda 	#$EA
.010685	85 16		sta $16				sta 	DRandom+2
.010687					_Rnd_NotZero:
.010687	20 92 06	jsr $010692			jsr 	_Rnd_Process 				; call randomiser twice
.01068a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01068c	20 92 06	jsr $010692			jsr 	_Rnd_Process
.01068f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010691	60		rts				rts
.010692					_Rnd_Process:
.010692	06 14		asl $14				asl 	DRandom 					; shift right, exit
.010694	26 16		rol $16				rol 	DRandom+2
.010696	90 0e		bcc $0106a6			bcc 	_Rnd_Exit
.010698	a5 14		lda $14				lda 	DRandom 					; taps effectively
.01069a	49 54 d4	eor #$d454			eor 	#$D454
.01069d	85 14		sta $14				sta 	DRandom
.01069f	a5 16		lda $16				lda 	DRandom+2
.0106a1	49 d5 55	eor #$55d5			eor 	#$55D5
.0106a4	85 16		sta $16				sta 	DRandom+2
.0106a6					_Rnd_Exit:
.0106a6	a5 14		lda $14				lda 	DRandom
.0106a8	45 16		eor $16				eor 	DRandom+2
.0106aa	60		rts				rts

;******  Return to file: ../source/basic.asm

.0106ab					SwitchBasicInstance:
.0106ab	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0106ad	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0106b0	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0106b2	86 02		stx $02				stx		DBaseAddress
.0106b4	84 04		sty $04				sty 	DHighAddress
.0106b6	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0106b7	48		pha				pha 										; then copy it into B.
.0106b8	ab		plb				plb
.0106b9	ab		plb				plb
.0106ba	20 a5 01	jsr $0101a5			jsr 	EvaluateReset 						; start new instruction reset (temp string storage)
.0106bd	a9 08 41	lda #$4108			lda 	#$4100+8 							; initialise Code Pointer
.0106c0	85 06		sta $06				sta 	DCodePtr
.0106c2	20 b1 01	jsr $0101b1			jsr 	Evaluate 							; evaluate it.
.0106c5	ea		nop				nop
.0106c6						halt1:
.0106c6	02 00		cop #$00			cop 	#0
.0106c8	80 fc		bra $0106c6			bra 	halt1

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 4 times (64 bytes)...
>024058	00 00 00 00 00 00 00 00 2c 00 00 00 04 00 01 00
>024068	00 00 00 00 00 00 00 00 98 41 b1 bf 00 00 00 00
>024078	00 00 00 00 00 00 00 00 00 00 00 00 40 41 00 00
>024088	00 00 54 41 00 00 00 00 00 00 00 00 00 00 00 00
>024098	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240a8	00 00 00 00 68 41 00 00 00 00 00 00 00 00 00 00
>0240b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 5e 41
>0240d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240e8	00 00 00 00 00 00 82 41 00 00 00 00 00 00 00 00
>0240f8	00 00 00 00 00 00 00 00 3a 00 0a 80 01 40 06 22
>024108	97 7b 3f 78 3c 7b 07 5d 00 80 19 3c 0a 24 06 00
>024118	03 2d 2d 2d 0a 24 97 7b 3f 78 3c 7b 07 5d 02 80
>024128	19 3c 0a 24 06 00 03 2d 2d 2d 0a 24 4b 74 1c 50
>024138	00 00 00 00 ee ee ee ee 00 00 fa bf 00 00 fe ff
>024148	ff ff 00 00 f8 bf 00 00 d6 ff ff ff 4a 41 f4 bf
>024158	00 00 46 0c 00 00 00 00 f0 bf 00 00 dd bf 00 00
>024168	00 00 d9 bf 04 00 2e 04 02 00 2e 04 12 00 2e 04
>024178	22 00 2e 04 32 00 2e 04 42 00 00 00 d1 bf 03 00
>024188	c9 bf 00 00 c1 bf 00 00 b9 bf 00 00 b1 bf 00 00
>024198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2016 times (32256 bytes)...
>02bfa8	00 00 00 00 00 00 00 00 00 05 61 73 74 2e 33 00
>02bfb8	00 05 61 73 74 2e 32 00 00 05 61 73 74 2e 31 00
>02bfc8	00 05 61 73 74 2e 30 00 00 97 7b 3f 78 3c 7b 07
>02bfd8	5d 36 68 fe 4c 10 74 68 69 73 20 69 73 20 61 20
>02bfe8	73 74 72 69 6e 67 00 00 4b 74 1c 50 f5 64 18 40
>02bff8	f5 44 a2 61 bf 63 2c 45
.02c000					CodeEndSpace:

;******  End of listing

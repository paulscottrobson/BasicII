
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Sun Jun 02 21:24:49 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 47 03 01	jmp $010347		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	71 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	36 01					.word Binary_And               & $FFFF ; token $2001 "and"
>010004	46 01					.word Binary_Or                & $FFFF ; token $2002 "or"
>010006	56 01					.word Binary_Xor               & $FFFF ; token $2003 "xor"
>010008	9a 01					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	01 02					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	66 01					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	e3 01					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	c5 01					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	80 01					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	af 00					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	01 01					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	13 03					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	90 02					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	07 03					.word Binary_Modulus           & $FFFF ; token $260e "mod"
>01001e	12 01					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	24 01					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	71 03					.word IllegalToken             & $FFFF ; token $3a11 "rnd()"
>010024	71 03					.word IllegalToken             & $FFFF ; token $3a12 "sgn("
>010026	71 03					.word IllegalToken             & $FFFF ; token $3a13 "abs("
>010028	71 03					.word IllegalToken             & $FFFF ; token $3a14 "len("
>01002a	71 03					.word IllegalToken             & $FFFF ; token $3c15 ","
>01002c	71 03					.word IllegalToken             & $FFFF ; token $3c16 ";"
>01002e	71 03					.word IllegalToken             & $FFFF ; token $3c17 ":"
>010030	71 03					.word IllegalToken             & $FFFF ; token $3c18 "("
>010032	71 03					.word IllegalToken             & $FFFF ; token $3c19 ")"
>010034	71 03					.word IllegalToken             & $FFFF ; token $3e1a "let"
.010036					TokenText:
>010036	04 61 6e 64				.text $04,"and"      ; token $2001
>01003a	03 6f 72				.text $03,"or"       ; token $2002
>01003d	04 78 6f 72				.text $04,"xor"      ; token $2003
>010041	12 3c					.text $12,"<"        ; token $2204
>010043	12 3e					.text $12,">"        ; token $2205
>010045	12 3d					.text $12,"="        ; token $2206
>010047	13 3c 3d				.text $13,"<="       ; token $2207
>01004a	13 3e 3d				.text $13,">="       ; token $2208
>01004d	13 3c 3e				.text $13,"<>"       ; token $2209
>010050	22 2b					.text $22,"+"        ; token $240a
>010052	22 2d					.text $22,"-"        ; token $240b
>010054	32 2a					.text $32,"*"        ; token $260c
>010056	32 2f					.text $32,"/"        ; token $260d
>010058	34 6d 6f 64				.text $34,"mod"      ; token $260e
>01005c	33 3e 3e				.text $33,">>"       ; token $260f
>01005f	33 3c 3c				.text $33,"<<"       ; token $2610
>010062	d6 72 6e 64 28 29			.text $d6,"rnd()"    ; token $3a11
>010068	d5 73 67 6e 28				.text $d5,"sgn("     ; token $3a12
>01006d	d5 61 62 73 28				.text $d5,"abs("     ; token $3a13
>010072	d5 6c 65 6e 28				.text $d5,"len("     ; token $3a14
>010077	e2 2c					.text $e2,","        ; token $3c15
>010079	e2 3b					.text $e2,";"        ; token $3c16
>01007b	e2 3a					.text $e2,":"        ; token $3c17
>01007d	e2 28					.text $e2,"("        ; token $3c18
>01007f	e2 29					.text $e2,")"        ; token $3c19
>010081	f4 6c 65 74				.text $f4,"let"      ; token $3e1a
>010085	00					.byte $00
=$2001					andTokenID                       = $2001
=$2002					orTokenID                        = $2002
=$2003					xorTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					modTokenID                       = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3a11					rndlparenrparenTokenID           = $3a11
=$3a12					sgnlparenTokenID                 = $3a12
=$3a13					abslparenTokenID                 = $3a13
=$3a14					lenlparenTokenID                 = $3a14
=$3c15					commaTokenID                     = $3c15
=$3c16					semicolonTokenID                 = $3c16
=$3c17					colonTokenID                     = $3c17
=$3c18					lparenTokenID                    = $3c18
=$3c19					rparenTokenID                    = $3c19
=$3e1a					letTokenID                       = $3e1a

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/block.inc

=$0004					BlockLowMemoryPtr = $0004
=$0006					BlockHighMemoryPtr = $0006
=$0020					BlockHashTable = $0020
=$0020					BlockHashTableSize = $0020
=$000f					BlockHashMask = $000f
=$00c0					BlockProgranStart = $00c0

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=$00					DPageNumber = DPBaseAddress 				; page number of workspace area
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; LONG Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; LONG Temporary value
=16					DSignCount = DPBaseAddress + 16 			; Sign count in division.
=18					DTempStringPtr = DPBaseAddress + 18 		; Temporary string allocation (working down)
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = 32  							; High word
=64					EXSPrecType = 64							; Type (bit 15, string = 1), rest are precedence bits.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010086					CheckNumeric:
.010086	b5 40		lda $40,x			lda 	EXSPrecType+0,x 				; check bit 15 of both types are zero
.010088	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01008a	30 01		bmi $01008d			bmi 	_CNError
.01008c	60		rts				rts
.01008d					_CNError:
.01008d	20 8e 03	jsr $01038e			jsr 	ReportError
>010090	4e 75 6d 65 72 69 63 20				.text	"Numeric value expected",0
>010098	76 61 6c 75 65 20 65 78 70 65 63 74 65 64 00
.0100a7					ResetTypeInteger:
.0100a7	b5 40		lda $40,x			lda 	EXSPrecType+0,x 				; clear bit 15 of type, forcing an integer return.
.0100a9	29 ff 7f	and #$7fff			and 	#$7FFF
.0100ac	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0100ae	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0100af					Binary_Add:
.0100af	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0100b1	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0100b3	30 12		bmi $0100c7		bmi 	_BATypeError
.0100b5	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0100b7	30 3f		bmi $0100f8		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0100b9	18		clc			clc
.0100ba	b5 00		lda $00,x		lda		EXSValueL+0,x
.0100bc	75 02		adc $02,x		adc 	EXSValueL+2,x
.0100be	95 00		sta $00,x		sta 	EXSValueL+0,x
.0100c0	b5 20		lda $20,x		lda		EXSValueH+0,x
.0100c2	75 22		adc $22,x		adc 	EXSValueH+2,x
.0100c4	95 20		sta $20,x		sta 	EXSValueH+0,x
.0100c6	60		rts			rts
.0100c7					_BATypeError:
.0100c7	20 8e 03	jsr $01038e		jsr 	ReportError
>0100ca	2b 20 6f 70 65 72 61 74			.text 	"+ operator can't mix types",$00
>0100d2	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0100e2	65 73 00
.0100e5					_BALengthError:
.0100e5	20 8e 03	jsr $01038e		jsr 	ReportError
>0100e8	53 74 72 69 6e 67 20 74			.text 	"String too long",$00
>0100f0	6f 6f 20 6c 6f 6e 67 00
.0100f8					_BAConcatenateString:
.0100f8	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0100fa	85 08		sta $08			sta 	DTemp1
.0100fc	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0100fe	85 0c		sta $0c			sta 	DTemp2
.010100	ea		nop			nop
.010101					Binary_Subtract:
.010101	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010104	38		sec			sec
.010105	b5 00		lda $00,x		lda		EXSValueL+0,x
.010107	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010109	95 00		sta $00,x		sta 	EXSValueL+0,x
.01010b	b5 20		lda $20,x		lda		EXSValueH+0,x
.01010d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01010f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010111	60		rts			rts
.010112					Binary_ShiftRight:
.010112	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010115	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010117	29 3f 00	and #$003f		and 	#63
.01011a	f0 07		beq $010123		beq		_Binary_SRExit
.01011c					_Binary_SRLoop:
.01011c	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.01011e	76 00		ror $00,x		ror 	EXSValueL+0,x
.010120	3a		dec a			dec 	a
.010121	d0 f9		bne $01011c		bne 	_Binary_SRLoop
.010123					_Binary_SRExit:
.010123	60		rts			rts
.010124					Binary_ShiftLeft:
.010124	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010127	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010129	29 3f 00	and #$003f		and 	#63
.01012c	f0 07		beq $010135		beq		_Binary_SLExit
.01012e					_Binary_SLLoop:
.01012e	16 00		asl $00,x		asl 	EXSValueL+0,x
.010130	36 20		rol $20,x		rol 	EXSValueH+0,x
.010132	3a		dec a			dec 	a
.010133	d0 f9		bne $01012e		bne 	_Binary_SLLoop
.010135					_Binary_SLExit:
.010135	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010136					Binary_And:
.010136	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010139	b5 00		lda $00,x		lda		EXSValueL+0,x
.01013b	35 02		and $02,x		and 	EXSValueL+2,x
.01013d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01013f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010141	35 22		and $22,x		and 	EXSValueH+2,x
.010143	95 20		sta $20,x		sta 	EXSValueH+0,x
.010145	60		rts			rts
.010146					Binary_Or:
.010146	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010149	b5 00		lda $00,x		lda		EXSValueL+0,x
.01014b	15 02		ora $02,x		ora 	EXSValueL+2,x
.01014d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01014f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010151	15 22		ora $22,x		ora 	EXSValueH+2,x
.010153	95 20		sta $20,x		sta 	EXSValueH+0,x
.010155	60		rts			rts
.010156					Binary_Xor:
.010156	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010159	b5 00		lda $00,x		lda		EXSValueL+0,x
.01015b	55 02		eor $02,x		eor 	EXSValueL+2,x
.01015d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01015f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010161	55 22		eor $22,x		eor 	EXSValueH+2,x
.010163	95 20		sta $20,x		sta 	EXSValueH+0,x
.010165	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010166					Binary_Equals:
.010166	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010169	b0 0e		bcs $010179		bcs 	_BEString
.01016b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01016d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01016f	d0 4f		bne $0101c0		bne 	Compare_Fail
.010171	b5 20		lda $20,x		lda 	EXSValueH,x
.010173	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010175	d0 49		bne $0101c0		bne 	Compare_Fail
.010177	80 3f		bra $0101b8		bra 	Compare_Succeed
.010179					_BEString:
.010179	09 00 00	ora #$0000		ora 	#$0000
.01017c	f0 3a		beq $0101b8		beq 	Compare_Succeed
.01017e	80 40		bra $0101c0		bra 	Compare_Fail
.010180					Binary_NotEquals:
.010180	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010183	b0 0e		bcs $010193		bcs 	_BNEString
.010185	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010187	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010189	d0 2d		bne $0101b8		bne 	Compare_Succeed
.01018b	b5 20		lda $20,x		lda 	EXSValueH,x
.01018d	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.01018f	d0 27		bne $0101b8		bne 	Compare_Succeed
.010191	80 2d		bra $0101c0		bra 	Compare_Fail
.010193					_BNEString:
.010193	09 00 00	ora #$0000		ora 	#$0000
.010196	d0 20		bne $0101b8		bne 	Compare_Succeed
.010198	80 26		bra $0101c0		bra 	Compare_Fail
.01019a					Binary_Less:
.01019a	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01019d	b0 12		bcs $0101b1		bcs 	_BLString
.01019f	38		sec			sec
.0101a0	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0101a2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0101a4	b5 20		lda $20,x		lda 	EXSValueH,x
.0101a6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0101a8	50 03		bvc $0101ad		bvc 	*+5
.0101aa	49 00 80	eor #$8000		eor 	#$8000
.0101ad	30 09		bmi $0101b8		bmi 	Compare_Succeed
.0101af	80 0f		bra $0101c0		bra 	Compare_Fail
.0101b1					_BLString:
.0101b1	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0101b4	f0 02		beq $0101b8		beq 	Compare_Succeed
.0101b6	80 08		bra $0101c0		bra 	Compare_Fail
.0101b8					Compare_Succeed:
.0101b8	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0101bb	95 00		sta $00,x		sta 	EXSValueL,x
.0101bd	95 20		sta $20,x		sta 	EXSValueH,x
.0101bf	60		rts			rts
.0101c0					Compare_Fail:
.0101c0	74 00		stz $00,x		stz 	EXSValueL,x
.0101c2	74 20		stz $20,x		stz 	EXSValueH,x
.0101c4	60		rts			rts
.0101c5					Binary_GreaterEqual:
.0101c5	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0101c8	b0 12		bcs $0101dc		bcs 	_BGEString
.0101ca	38		sec			sec
.0101cb	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0101cd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0101cf	b5 20		lda $20,x		lda 	EXSValueH,x
.0101d1	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0101d3	50 03		bvc $0101d8		bvc 	*+5
.0101d5	49 00 80	eor #$8000		eor 	#$8000
.0101d8	10 de		bpl $0101b8		bpl 	Compare_Succeed
.0101da	80 e4		bra $0101c0		bra 	Compare_Fail
.0101dc					_BGEString:
.0101dc	09 00 00	ora #$0000		ora 	#$0000
.0101df	10 d7		bpl $0101b8		bpl 	Compare_Succeed
.0101e1	80 dd		bra $0101c0		bra 	Compare_Fail
.0101e3					Binary_LessEqual:
.0101e3	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0101e6	b0 12		bcs $0101fa		bcs 	_BLEString
.0101e8	18		clc			clc 									; numeric <= signed
.0101e9	b5 00		lda $00,x		lda 	EXSValueL,x
.0101eb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0101ed	b5 20		lda $20,x		lda 	EXSValueH,x
.0101ef	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0101f1	50 03		bvc $0101f6		bvc 	*+5
.0101f3	49 00 80	eor #$8000		eor 	#$8000
.0101f6	30 c0		bmi $0101b8		bmi 	Compare_Succeed
.0101f8	80 c6		bra $0101c0		bra 	Compare_Fail
.0101fa					_BLEString:
.0101fa	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0101fd	d0 b9		bne $0101b8		bne 	Compare_Succeed
.0101ff	80 bf		bra $0101c0		bra 	Compare_Fail
.010201					Binary_Greater:
.010201	20 1f 02	jsr $01021f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010204	b0 12		bcs $010218		bcs 	_BGString
.010206	18		clc			clc 									; numeric > signed
.010207	b5 00		lda $00,x		lda 	EXSValueL,x
.010209	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01020b	b5 20		lda $20,x		lda 	EXSValueH,x
.01020d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01020f	50 03		bvc $010214		bvc 	*+5
.010211	49 00 80	eor #$8000		eor 	#$8000
.010214	10 a2		bpl $0101b8		bpl 	Compare_Succeed
.010216	80 a8		bra $0101c0		bra 	Compare_Fail
.010218					_BGString:
.010218	c9 01 00	cmp #$0001		cmp 	#$0001
.01021b	f0 9b		beq $0101b8		beq 	Compare_Succeed
.01021d	80 a1		bra $0101c0		bra 	Compare_Fail
.01021f					CompareTypeCheck:
.01021f	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010221	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010223	30 06		bmi $01022b		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010225	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010227	30 22		bmi $01024b		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010229	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01022a	60		rts			rts
.01022b					_CTCFail:
.01022b	20 8e 03	jsr $01038e		jsr 	ReportError
>01022e	43 6f 6d 70 61 72 69 73			.text 	"Comparison must be same type",$00
>010236	6f 6e 20 6d 75 73 74 20 62 65 20 73 61 6d 65 20
>010246	74 79 70 65 00
.01024b					_CTCStringCompare:
.01024b	20 a7 00	jsr $0100a7		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01024e	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010250	85 08		sta $08			sta 	DTemp1
.010252	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010254	85 0c		sta $0c			sta 	DTemp2
.010256	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010259	a8		tay			tay
.01025a	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01025c	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01025e	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010260	90 02		bcc $010264		bcc 	_CTCSmallest
.010262	b2 0c		lda ($0c)		lda 	(DTemp2)
.010264					_CTCSmallest:
.010264	85 10		sta $10			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010266					_CTCCompare:
.010266	c8		iny			iny 									; look at next character (done first, first char is size)
.010267	c6 10		dec $10			dec 	DSignCount 						; decrement counter
.010269	30 16		bmi $010281		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01026b	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01026d	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01026f	f0 f5		beq $010266		beq 	_CTCCompare 					; if zero, try the next character.
.010271	b0 07		bcs $01027a		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010273					_CTCLess:
.010273	c2 20		rep #$20		rep 	#$20
.010275	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010278	80 14		bra $01028e		bra 	_CTCExit
.01027a					_CTCGreater:
.01027a	c2 20		rep #$20		rep 	#$20
.01027c	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01027f	80 0d		bra $01028e		bra 	_CTCExit
.010281					_CTCEqualSoFar:
.010281	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010283	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010285	90 ec		bcc $010273		bcc 	_CTCLess
.010287	d0 f1		bne $01027a		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010289	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01028b	a9 00 00	lda #$0000		lda 	#$0000
.01028e					_CTCExit:
.01028e	38		sec			sec 									; return with CS indicating string comparison.
.01028f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010290					Binary_Divide:
.010290	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010293	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010295	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010297	d0 14		bne $0102ad		bne 	_BinaryDivide_Ok
.010299	20 8e 03	jsr $01038e		jsr 	ReportError							; error if so.
>01029c	44 69 76 69 73 69 6f 6e			.text	"Division by zero",$00
>0102a4	20 62 79 20 7a 65 72 6f 00
.0102ad					_BinaryDivide_Ok:
.0102ad	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0102af	64 0a		stz $0a			stz 	DTemp1+2
.0102b1	64 10		stz $10			stz 	DSignCount  						; zero sign count.
.0102b3	5a		phy			phy 										; save Y (bit counter)
.0102b4	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0102b6	10 07		bpl $0102bf		bpl 	_BinaryDivide_RightDone
.0102b8	e8		inx			inx
.0102b9	e8		inx			inx
.0102ba	20 f5 02	jsr $0102f5		jsr 	Binary_DivNegate
.0102bd	ca		dex			dex
.0102be	ca		dex			dex
.0102bf					_BinaryDivide_RightDone:
.0102bf	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0102c1	10 03		bpl $0102c6		bpl 	_BinaryDivide_LeftDone
.0102c3	20 f5 02	jsr $0102f5		jsr 	Binary_DivNegate
.0102c6					_BinaryDivide_LeftDone:
.0102c6	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0102c9					_BinaryDivide_Loop:
.0102c9	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0102cb	36 20		rol $20,x		rol 	EXSValueH+0,x
.0102cd	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0102cf	26 0a		rol $0a			rol 	DTemp1+2
.0102d1	38		sec			sec											; calculate A-M
.0102d2	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0102d4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0102d6	85 0c		sta $0c			sta 	DTemp2
.0102d8	a5 0a		lda $0a			lda 	DTemp1+2
.0102da	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0102dc	90 08		bcc $0102e6		bcc 	_Binary_NoSubract 					; if A < M skip this
.0102de	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0102e0	a5 0c		lda $0c			lda 	DTemp2
.0102e2	85 08		sta $08			sta 	DTemp1+0
.0102e4	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0102e6					_Binary_NoSubract:
.0102e6	88		dey			dey 										; do it 32 times.
.0102e7	d0 e0		bne $0102c9		bne 	_BinaryDivide_Loop
.0102e9					_BinaryDivide_Exit:
.0102e9	a5 10		lda $10			lda 	DSignCount 							; restore sign
.0102eb	29 01 00	and #$0001		and 	#1
.0102ee	f0 03		beq $0102f3		beq 	_BinaryDivide_Exit2
.0102f0	20 f5 02	jsr $0102f5		jsr 	Binary_DivNegate
.0102f3					_BinaryDivide_Exit2:
.0102f3	7a		ply			ply 										; restore Y
.0102f4	60		rts			rts
.0102f5					Binary_DivNegate:
.0102f5	e6 10		inc $10			inc 	DSignCount 							; increment the count of signs.
.0102f7	38		sec			sec 										; negate the value at stack X.
.0102f8	a9 00 00	lda #$0000		lda 	#$0000
.0102fb	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0102fd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0102ff	a9 00 00	lda #$0000		lda 	#$0000
.010302	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010304	95 20		sta $20,x		sta 	EXSValueH+0,x
.010306	60		rts			rts
.010307					Binary_Modulus:
.010307	20 90 02	jsr $010290		jsr 	Binary_Divide 						; do the divide
.01030a	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01030c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01030e	a5 0a		lda $0a			lda 	DTemp1+2
.010310	95 20		sta $20,x		sta 	EXSValueH+0,x
.010312	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010313					Binary_Multiply:
.010313	20 86 00	jsr $010086		jsr 	CheckNumeric 						; check both values are numeric
.010316	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010318	85 08		sta $08			sta 	DTemp1
.01031a	b5 20		lda $20,x		lda 	EXSValueH+0,x
.01031c	85 0a		sta $0a			sta		DTemp1+2
.01031e	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010320	74 20		stz $20,x		stz 	EXSValueH+0,x
.010322					_BinaryMultiply_Loop:
.010322	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010324	05 0a		ora $0a			ora 	DTemp1+2
.010326	f0 1e		beq $010346		beq 	_BinaryMultiply_Exit
.010328	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01032a	29 01 00	and #$0001		and 	#1
.01032d	f0 0d		beq $01033c		beq 	_BinaryMultiply_NoAdd
.01032f	18		clc			clc 										; add multiplicand to result.
.010330	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010332	75 02		adc $02,x		adc 	EXSValueL+2,x
.010334	95 00		sta $00,x		sta 	EXSValueL+0,x
.010336	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010338	75 22		adc $22,x		adc 	EXSValueH+2,x
.01033a	95 20		sta $20,x		sta 	EXSValueH+0,x
.01033c					_BinaryMultiply_NoAdd:
.01033c	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01033e	66 08		ror $08			ror 	DTemp1
.010340	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010342	36 22		rol $22,x		rol 	EXSValueH+2,x
.010344	80 dc		bra $010322		bra 	_BinaryMultiply_Loop 				; go round again.
.010346					_BinaryMultiply_Exit:
.010346	60		rts			rts

;******  Return to file: ..\source\basic.asm

.010347					SwitchBasicInstance:
.010347	c2 30		rep #$30		rep 	#$30 									; 16 bit AX mode.
.010349	29 ff 00	and #$00ff		and 	#$00FF 									; make page number 24 bit
.01034c	85 00		sta $00			sta 	DPageNumber 							; save page, base, high
.01034e	86 02		stx $02			stx		DBaseAddress
.010350	84 04		sty $04			sty 	DHighAddress
.010352	eb		xba			xba 											; put the page number (goes in the DBR) in B
.010353	48		pha			pha 											; then copy it into B.
.010354	ab		plb			plb
.010355	ab		plb			plb
.010356	ea		nop			nop
.010357	a0 06 00	ldy #$0006		ldy 	#BlockHighMemoryPtr 					; reset temp store pointer
.01035a	b1 02		lda ($02),y		lda 	(DBaseAddress),y
.01035c	38		sec			sec
.01035d	e9 00 01	sbc #$0100		sbc 	#256
.010360	85 12		sta $12			sta 	DTempStringPtr
.010362	a9 c8 40	lda #$40c8		lda 	#$40C0+8 								; initialise Code Pointer
.010365	85 06		sta $06			sta 	DCodePtr
.010367	a2 00 01	ldx #$0100		ldx 	#EXSBase
.01036a	a9 00 00	lda #$0000		lda 	#0<<9 									; current precedence level.
.01036d					halt1:
.01036d	02 00		cop #$00		cop 	#0
.01036f	80 fc		bra $01036d		bra 	halt1
.010371					IllegalToken:
.010371	20 8e 03	jsr $01038e		jsr 	ReportError
>010374	42 61 64 20 74 6f 6b 65			.text 	"Bad token",0
>01037c	6e 00
.01037e					SyntaxError:
.01037e	20 8e 03	jsr $01038e		jsr 	ReportError
>010381	53 79 6e 74 61 78 20 45			.text 	"Syntax Error",0
>010389	72 72 6f 72 00
.01038e					ReportError:
.01038e	ea		nop			nop
.01038f	80 fd		bra $01038e		bra 	ReportError

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 e0 40 00 c0			.binary "temp/basic.bin"
>024008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 10 times (160 bytes)...
>0240b8	00 00 00 00 00 00 00 00 0c 00 0a 80 01 40 06 22
>0240c8	04 80 00 00 0e 00 14 80 1a 3e 01 40 06 22 2a 80
>0240d8	00 00 00 00 ee ee ee ee 00 00 00 00 00 00 00 00
>0240e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2032 times (32512 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing

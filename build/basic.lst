
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Wed Jun  5 16:38:41 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c e3 06 01	jmp $0106e3		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	2a 01					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	0d 04					.word Binary_And               & $FFFF ; token $2001 "and"
>010004	1d 04					.word Binary_Or                & $FFFF ; token $2002 "or"
>010006	2d 04					.word Binary_Xor               & $FFFF ; token $2003 "xor"
>010008	71 04					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d8 04					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	3d 04					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	ba 04					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	9c 04					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	57 04					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	57 03					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d8 03					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e4 05					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	61 05					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d8 05					.word Binary_Modulus           & $FFFF ; token $260e "mod"
>01001e	e9 03					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	fb 03					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	72 06					.word Function_Random          & $FFFF ; token $3a11 "rnd()"
>010024	52 06					.word Function_Sgn             & $FFFF ; token $3a12 "sgn("
>010026	2e 06					.word Function_Abs             & $FFFF ; token $3a13 "abs("
>010028	18 06					.word Function_Len             & $FFFF ; token $3a14 "len("
>01002a	2a 01					.word IllegalToken             & $FFFF ; token $3c15 ","
>01002c	2a 01					.word IllegalToken             & $FFFF ; token $3c16 ";"
>01002e	2a 01					.word IllegalToken             & $FFFF ; token $3c17 ":"
>010030	2a 01					.word IllegalToken             & $FFFF ; token $3c18 "("
>010032	2a 01					.word IllegalToken             & $FFFF ; token $3c19 ")"
>010034	a9 06					.word Function_Let             & $FFFF ; token $3e1a "let"
.010036					TokenText:
>010036	04 61 6e 64				.text $04,"and"      ; token $2001
>01003a	03 6f 72				.text $03,"or"       ; token $2002
>01003d	04 78 6f 72				.text $04,"xor"      ; token $2003
>010041	12 3c					.text $12,"<"        ; token $2204
>010043	12 3e					.text $12,">"        ; token $2205
>010045	12 3d					.text $12,"="        ; token $2206
>010047	13 3c 3d				.text $13,"<="       ; token $2207
>01004a	13 3e 3d				.text $13,">="       ; token $2208
>01004d	13 3c 3e				.text $13,"<>"       ; token $2209
>010050	22 2b					.text $22,"+"        ; token $240a
>010052	22 2d					.text $22,"-"        ; token $240b
>010054	32 2a					.text $32,"*"        ; token $260c
>010056	32 2f					.text $32,"/"        ; token $260d
>010058	34 6d 6f 64				.text $34,"mod"      ; token $260e
>01005c	33 3e 3e				.text $33,">>"       ; token $260f
>01005f	33 3c 3c				.text $33,"<<"       ; token $2610
>010062	d6 72 6e 64 28 29			.text $d6,"rnd()"    ; token $3a11
>010068	d5 73 67 6e 28				.text $d5,"sgn("     ; token $3a12
>01006d	d5 61 62 73 28				.text $d5,"abs("     ; token $3a13
>010072	d5 6c 65 6e 28				.text $d5,"len("     ; token $3a14
>010077	e2 2c					.text $e2,","        ; token $3c15
>010079	e2 3b					.text $e2,";"        ; token $3c16
>01007b	e2 3a					.text $e2,":"        ; token $3c17
>01007d	e2 28					.text $e2,"("        ; token $3c18
>01007f	e2 29					.text $e2,")"        ; token $3c19
>010081	f4 6c 65 74				.text $f4,"let"      ; token $3e1a
>010085	00					.byte $00
=$2001					andTokenID                       = $2001
=$2002					orTokenID                        = $2002
=$2003					xorTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					modTokenID                       = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3a11					rndlparenrparenTokenID           = $3a11
=$3a12					sgnlparenTokenID                 = $3a12
=$3a13					abslparenTokenID                 = $3a13
=$3a14					lenlparenTokenID                 = $3a14
=$3c15					commaTokenID                     = $3c15
=$3c16					semicolonTokenID                 = $3c16
=$3c17					colonTokenID                     = $3c17
=$3c18					lparenTokenID                    = $3c18
=$3c19					rparenTokenID                    = $3c19
=$3e1a					letTokenID                       = $3e1a

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/block.inc

=$0004					BlockFastVariables = $0004
=$0070					BlockLowMemoryPtr = $0070
=$0072					BlockHighMemoryPtr = $0072
=$0080					BlockHashTable = $0080
=$0020					BlockHashTableSize = $0020
=$000f					BlockHashMask = $000f
=$0100					BlockProgranStart = $0100

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DSignCount = DPBaseAddress + 16 			; Sign count in division.
=18					DConstantShift = DPBaseAddress + 18 		; Constant Shift used in expression evaluation
=20					DRandom = DPBaseAddress + 20 				; *** LONG *** Random Seed
=24					DTempStringPtr = DPBaseAddress + 24 		; Temporary string allocation (working down)
=26					DStartTempString = DPBaseaddress + 26 		; Start of current temporary string
=28					DCurrentTempString = DPBaseaddress + 28 	; Next free in current temporary string
=30					DVariableDataAddress = DPBaseAddress + 30 	; Address of 4 byte data
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Type (bit 15, string = 1), rest are precedence bits.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010086					FindVariable:
.010086	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token
.010088	c9 1b 40	cmp #$401b			cmp 	#$401B 						; $4001-$401A represent fast variables A-Z
.01008b	b0 13		bcs $0100a0			bcs 	_FVStandard 				; if >= then it is stored in the hashed entries.
.01008d	29 1f 00	and #$001f			and 	#$001F 						; now 1-26
.010090	3a		dec a				dec 	a 							; now 0-25
.010091	0a		asl a				asl 	a 							; now 0-100
.010092	0a		asl a				asl 	a 							; and clears carry.
.010093	69 04 00	adc #$0004			adc 	#BlockFastVariables 		; address offset in block
.010096	65 02		adc $02				adc 	DBaseAddress 				; now contains the base address + offset + address
.010098	85 1e		sta $1e				sta 	DVariableDataAddress 		; save address
.01009a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01009c	e6 06		inc $06				inc 	DCodePtr
.01009e	18		clc				clc 								; and return CC == okay.
.01009f	60		rts				rts
.0100a0					_FVStandard:
.0100a0	48		pha				pha 								; save first token
.0100a1	29 0f 00	and #$000f			and 	#BlockHashMask 				; create a hash index
.0100a4	0a		asl a				asl 	a 							; double it, because it's a word address
.0100a5	85 08		sta $08				sta 	DTemp1 						; save it
.0100a7	68		pla				pla 								; restore first token.
.0100a8	eb		xba				xba 								; type bits were in 11 and 12, now they're in 3 and 4
.0100a9	29 18 00	and #$0018			and 	#$0018 						; isolate those type bits
.0100ac	0a		asl a				asl 	a 							; This makes A = type bits x 16
.0100ad	0a		asl a				asl 	a 							; A = type bits x 32 and clears carry.
.0100ae	65 08		adc $08				adc 	DTemp1 						; add offset in the table
.0100b0	69 80 00	adc #$0080			adc 	#BlockHashTable 			; now its an offset in the block
.0100b3	65 02		adc $02				adc 	DBaseAddress 				; now it's an address
.0100b5	85 08		sta $08				sta 	DTemp1 						; put it in DTemp1
.0100b7					_FVNext:
.0100b7	b2 08		lda ($08)			lda 	(DTemp1) 					; read the next link.
.0100b9	f0 32		beq $0100ed			beq 	_FVFail						; if zero, the variable does not exist.
.0100bb	85 08		sta $08				sta 	DTemp1 						; make this the one we are checking.
.0100bd	a0 02 00	ldy #$0002			ldy 	#2 							; get the address of the string into DTemp2
.0100c0	b1 08		lda ($08),y			lda 	(DTemp1),y
.0100c2	85 0c		sta $0c				sta 	DTemp2
.0100c4	a0 00 00	ldy #$0000			ldy 	#0
.0100c7					_FVCompare:
.0100c7	b1 06		lda ($06),y			lda 	(DCodePtr),y 				; compare the two tokens
.0100c9	d1 0c		cmp ($0c),y			cmp 	(DTemp2),y
.0100cb	d0 ea		bne $0100b7			bne 	_FVNext 					; if they are different, go to the next list entry.
.0100cd	c8		iny				iny 								; advance token pointer by 2
.0100ce	c8		iny				iny
.0100cf	29 00 20	and #$2000			and 	#$2000 						; check the continuation bit.
.0100d2	d0 f3		bne $0100c7			bne 	_FVCompare 					; if set, then try the next two tokens, clear = match.
.0100d4	b2 06		lda ($06)			lda 	(DCodePtr)					; push the first token on the stack
.0100d6	48		pha				pha
.0100d7	98		tya				tya 								; Y is the amount to advance it by.
.0100d8	18		clc				clc
.0100d9	65 06		adc $06				adc 	DCodePtr
.0100db	85 06		sta $06				sta 	DCodePtr
.0100dd	68		pla				pla 								; restore first token
.0100de	29 00 08	and #$0800			and 	#$0800 						; is it an array.
.0100e1	d0 0c		bne $0100ef			bne 	_FVIndexed 					; if so, need to calculate and apply the index.
.0100e3	a5 08		lda $08				lda 	DTemp1 						; copy current record + 6 to DVariableDataAddress
.0100e5	18		clc				clc
.0100e6	69 06 00	adc #$0006			adc 	#6
.0100e9	85 1e		sta $1e				sta 	DVariableDataAddress
.0100eb	18		clc				clc 								; return with carry clear.
.0100ec	60		rts				rts
.0100ed					_FVFail:
.0100ed	38		sec				sec
.0100ee	60		rts				rts
.0100ef					_FVIndexed:
.0100ef	a5 08		lda $08				lda 	DTemp1 						; address of the array record
.0100f1	48		pha				pha 								; save on stack
.0100f2	20 32 03	jsr $010332			jsr 	EvaluateNextInteger 		; this is the index.
.0100f5	c0 00 00	cpy #$0000			cpy 	#0 							; fail if upper word non zero.
.0100f8	d0 08		bne $010102			bne 	_FVIndexFail
.0100fa	7a		ply				ply 								; array record into Y.
.0100fb	d9 04 00	cmp $0004,y			cmp 	$0004,y 					; compare index vs highest index
.0100fe	90 15		bcc $010115			bcc 	_FVIndexOkay 				; if index <= highest it's okay.
.010100	f0 13		beq $010115			beq 	_FVIndexOkay
.010102					_FVIndexFail:
.010102	20 25 01	jsr $010125			jsr 	ErrorHandler
>010105	42 61 64 20 41 72 72 61				.text 	"Bad Array Index",$00
>01010d	79 20 49 6e 64 65 78 00
.010115					_FVIndexOkay:
.010115	0a		asl a				asl 	a 							; multiply the index by 4
.010116	0a		asl a				asl 	a 							; also clearing the carry.
.010117	84 08		sty $08				sty 	DTemp1 						; add the address record
.010119	65 08		adc $08				adc 	DTemp1
.01011b	69 06 00	adc #$0006			adc 	#6 							; add 6 for the header
.01011e	85 1e		sta $1e				sta 	DVariableDataAddress
.010120	20 65 01	jsr $010165			jsr 	ExpectRightBracket
.010123	18		clc				clc 								; return with carry clear
.010124	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010125					ErrorHandler:
.010125	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010127	ea		nop				nop
.010128	80 fe		bra $010128	_EH1:	bra 	_EH1
.01012a					IllegalToken:
.01012a	20 25 01	jsr $010125			jsr 	ErrorHandler
>01012d	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00
>010135	54 6f 6b 65 6e 00
.01013b					SyntaxError:
.01013b	20 25 01	jsr $010125			jsr 	ErrorHandler
>01013e	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00
>010146	72 72 6f 72 00
.01014b					ExpectToken:
.01014b	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01014d	d0 05		bne $010154			bne 	_CTKError					; error if not
.01014f	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010151	e6 06		inc $06				inc 	DCodePtr
.010153	60		rts				rts
.010154					_CTKError:
.010154	20 25 01	jsr $010125			jsr 	ErrorHandler
>010157	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00
>01015f	74 6f 6b 65 6e 00
.010165					ExpectRightBracket:
.010165	48		pha				pha
.010166	a9 19 3c	lda #$3c19			lda 	#rparenTokenID
.010169	20 4b 01	jsr $01014b			jsr 	ExpectToken
.01016c	68		pla				pla
.01016d	60		rts				rts
.01016e					ExpectComma:
.01016e	48		pha				pha
.01016f	a9 15 3c	lda #$3c15			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010172	20 4b 01	jsr $01014b			jsr 	ExpectToken
.010175	68		pla				pla
.010176	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010177					StringTempAllocate:
.010177	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01017a	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01017d	18		clc				clc 								; this adds one, for the length.
.01017e	65 18		adc $18				adc 	DTempStringPtr
.010180	85 18		sta $18				sta 	DTempStringPtr
.010182	48		pha				pha
.010183	a9 00 00	lda #$0000			lda 	#$0000
.010186	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010188	92 18		sta ($18)			sta		(DTempStringPtr)
.01018a	c2 20		rep #$20			rep 	#$20
.01018c	68		pla				pla
.01018d	85 1a		sta $1a				sta 	DStartTempString 			; start of temporary string.
.01018f	85 1c		sta $1c				sta 	DCurrentTempString 			; save current temporary string
.010191	e6 1c		inc $1c				inc 	DCurrentTempString 			; step over length byte.
.010193	60		rts				rts
.010194					StringCreateCopy:
.010194	a8		tay				tay 								; put pointer to string in Y
.010195	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010198	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01019b	f0 17		beq $0101b4			beq 	_SCCExit 					; do nothing if length zero.
.01019d	da		phx				phx 								; save X and put the character count in X
.01019e	aa		tax				tax
.01019f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0101a1					_SCCCopy:
.0101a1	c8		iny				iny 								; advance and read (first time skips length)
.0101a2	b9 00 00	lda $0000,y			lda 	$0000,y
.0101a5	92 1c		sta ($1c)			sta 	(DCurrentTempString) 		; write into target
.0101a7	e6 1c		inc $1c				inc 	DCurrentTempString 			; bump target pointer
.0101a9	b2 1a		lda ($1a)			lda 	(DStartTempString)			; one more character
.0101ab	1a		inc a				inc 	a
.0101ac	92 1a		sta ($1a)			sta 	(DStartTempString)
.0101ae	ca		dex				dex 								; do X times
.0101af	d0 f0		bne $0101a1			bne 	_SCCCopy
.0101b1	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0101b3	fa		plx				plx
.0101b4					_SCCExit:
.0101b4	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101b5					EvaluateReset:
.0101b5	a0 72 00	ldy #$0072			ldy 	#BlockHighMemoryPtr 		; reset temp store pointer, start at high memory.
.0101b8	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0101ba	38		sec				sec 								; allocate 256 bytes down. This gives clear space to
.0101bb	e9 00 01	sbc #$0100			sbc 	#256 						; 'concrete' a string later on as must be 255 chars or less
.0101be	85 18		sta $18				sta 	DTempStringPtr 				; store as temporary string pointer start address.
.0101c0	60		rts				rts
.0101c1					Evaluate:
.0101c1	a2 00 01	ldx #$0100			ldx 	#EXSBase					; reset the stack base
.0101c4	a9 00 00	lda #$0000			lda 	#0<<9 						; current precedence level, which is the lowest
.0101c7					EvaluateLevel:
.0101c7	95 20		sta $20,x			sta 	EXSPrecType+0,x 				; save precedence level, also sets type to integer.
.0101c9	b2 06		lda ($06)			lda 	(DCodePtr)						; look at the next token
.0101cb	f0 0e		beq $0101db			beq 	_ELExpressionSyntax 			; EOL token, there's an error.
.0101cd	30 2d		bmi $0101fc			bmi 	_ELConstant 					; 8000-FFFF constant.
.0101cf	c9 00 10	cmp #$1000			cmp 	#$1000 							; string constant ? 00xx
.0101d2	90 0a		bcc $0101de			bcc 	_ELStringConstant
.0101d4	c9 00 20	cmp #$2000			cmp 	#$2000 							; constant shift ? 1xxx
.0101d7	90 1d		bcc $0101f6			bcc 	_ELConstantShift
.0101d9	80 7d		bra $010258			bra 	_ELKeywordFunction 				; must be 2000-7FFF e.g. identifier or keyword.
.0101db					_ELExpressionSyntax:
.0101db	4c 3b 01	jmp $01013b			jmp 	SyntaxError
.0101de					_ELStringConstant:
.0101de	a5 06		lda $06				lda 	DCodePtr 						; get the address of the token
.0101e0	1a		inc a				inc 	a 								; adding 2 goes to the start of the string (len byte)
.0101e1	1a		inc a				inc 	a
.0101e2	95 00		sta $00,x			sta 	EXSValueL+0,x 					; the LSB of the string.
.0101e4	74 10		stz $10,x			stz 	EXSValueH+0,x 					; the MSB is always zero.
.0101e6	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; make type string
.0101e8	09 00 80	ora #$8000			ora 	#$8000
.0101eb	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101ed	18		clc				clc
.0101ee	b2 06		lda ($06)			lda 	(DCodePtr) 						; add length to pointer to skip over
.0101f0	65 06		adc $06				adc 	DCodePtr
.0101f2	85 06		sta $06				sta 	DCodePtr
.0101f4	80 1b		bra $010211			bra 	_ELGotAtom
.0101f6					_ELConstantShift:
.0101f6	85 12		sta $12				sta 	DConstantShift 					; update constant shift
.0101f8	e6 06		inc $06				inc 	DCodePtr 						; shift over constant shift
.0101fa	e6 06		inc $06				inc 	DCodePtr 						; fall through to constant code.
.0101fc					_ELConstant:
.0101fc	b2 06		lda ($06)			lda 	(DCodePtr)						; get the token (for fall through)
.0101fe	0a		asl a				asl 	a 								; shift left, also gets rid of the high bit
.0101ff	95 00		sta $00,x			sta 	EXSValueL+0,x 					; this is the low word
.010201	a5 12		lda $12				lda 	DConstantShift 					; get the constant shift
.010203	29 ff 0f	and #$0fff			and 	#$0FFF 							; mask off bits 12-15
.010206	4a		lsr a				lsr 	a 								; rotate bit 0 into carry
.010207	95 10		sta $10,x			sta 	EXSValueH+0,x 					; this is the high word
.010209	76 00		ror $00,x			ror 	EXSValueL+0,x 					; rotate carry into the low word
.01020b	64 12		stz $12				stz 	DConstantShift 					; reset the constant shift to zero.
.01020d	e6 06		inc $06				inc 	DCodePtr 						; skip over code pointer
.01020f	e6 06		inc $06				inc 	DCodePtr
.010211					_ELGotAtom:
.010211	b2 06		lda ($06)			lda 	(DCodePtr)						; get the next token.
.010213	a8		tay				tay 									; save in Y, temporarily.
.010214	29 00 f0	and #$f000			and 	#$F000 							; is it a binary operator keyword, 0010 tttx xxxx xxxx
.010217	c9 00 20	cmp #$2000			cmp 	#$2000
.01021a	d0 34		bne $010250			bne 	_ELExit 						; no, exit.
.01021c	b5 20		lda $20,x			lda 	EXSPrecType,X 					; get current precedence level
.01021e	29 ff 7f	and #$7fff			and 	#$7FFF 							; remove the type bit, so it's the actual level.
.010221	85 08		sta $08				sta 	DTemp1 							; save it.
.010223	98		tya				tya 									; get token back
.010224	29 00 1e	and #$1e00			and 	#15<<9 							; mask out the precedence data.
.010227	c5 08		cmp $08				cmp 	DTemp1 							; compare against current level
.010229	90 25		bcc $010250			bcc 	_ELExit 						; if too low, then exit this level
.01022b	5a		phy				phy 									; save operator token on stack.
.01022c	e6 06		inc $06				inc 	DCodePtr 						; skip over it
.01022e	e6 06		inc $06				inc 	DCodePtr
.010230	18		clc				clc 									; precedence data still in A, add 1 level to it
.010231	69 00 02	adc #$0200			adc 	#1<<9
.010234	e8		inx				inx 									; calculate the RHS at the next stack level.
.010235	e8		inx				inx
.010236	20 c7 01	jsr $0101c7			jsr 	EvaluateLevel
.010239	ca		dex				dex
.01023a	ca		dex				dex
.01023b	68		pla				pla 									; get operator token back
.01023c					_ELExecuteA:
.01023c	29 ff 01	and #$01ff			and 	#$01FF 							; keyword ID.
.01023f	0a		asl a				asl 	a 								; double it as keyword vector table is word data
.010240	9b		txy				txy 									; save X in Y
.010241	aa		tax				tax 									; double keyword ID in X
.010242	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 				; this is the vector address
.010246	bb		tyx				tyx 									; restore X.
.010247	8f 4c 02 01	sta $01024c			sta 	_ELCallRoutine+1 				; Self modifying, will not work in ROM.
.01024b					_ELCallRoutine:
.01024b	20 4b 02	jsr $01024b			jsr 	_ELCallRoutine 					; call the new address.
.01024e	80 c1		bra $010211			bra 	_ELGotAtom 						; go round operator level again.
.010250					_ELExit:
.010250	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; put bit 15 - type bit - in carry flag
.010252	0a		asl a				asl 	a
.010253	b5 00		lda $00,x			lda 	EXSValueL+0,x 					; put value in YA
.010255	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010257	60		rts				rts
.010258					_ELKeywordFunction:
.010258	c9 00 40	cmp #$4000			cmp 	#$4000 							; identifier (e.g. variable) if in range $4000-$7FFF
.01025b	b0 1a		bcs $010277			bcs 	_ELVariable 					; (we've already discounted 8000-FFFF)
.01025d	c9 0b 24	cmp #$240b			cmp 	#minusTokenID 					; special case keywords -(atom) (expression)
.010260	f0 4b		beq $0102ad			beq 	_ELMinusAtom
.010262	c9 18 3c	cmp #$3c18			cmp 	#lparenTokenID
.010265	f0 31		beq $010298			beq 	_ELParenthesis
.010267	a8		tay				tay 									; save token in Y
.010268	29 00 fe	and #$fe00			and 	#$FE00 							; look for 0011 101x ? i.e. a unary function.
.01026b	c9 00 3a	cmp #$3a00			cmp 	#$3A00 							; if it isn't then exit
.01026e	d0 e0		bne $010250			bne 	_ELExit
.010270					_ELUnaryFunction:
.010270	e6 06		inc $06				inc 	DCodePtr 						; skip over the unary function token, which is in Y
.010272	e6 06		inc $06				inc 	DCodePtr
.010274	98		tya				tya 									; get token back
.010275	80 c5		bra $01023c			bra 	_ELExecuteA 					; and execute it using the lower 9 bits of the token.
.010277					_ELVariable:
.010277	b2 06		lda ($06)			lda 	(DCodePtr)						; get first token
.010279	48		pha				pha 									; save on stack.
.01027a	20 86 00	jsr $010086			jsr 	FindVariable 					; does the variable exist ?
.01027d	b0 4e		bcs $0102cd			bcs 	_ELUnknownVariable				; if not, goto error.
.01027f	b2 1e		lda ($1e)			lda 	(DVariableDataAddress) 			; copy value into expression stack
.010281	95 00		sta $00,x			sta 	EXSValueL+0,x
.010283	a0 02 00	ldy #$0002			ldy 	#2
.010286	b1 1e		lda ($1e),y			lda 	(DVariableDataAddress),y
.010288	95 10		sta $10,x			sta 	EXSValueH+0,x
.01028a	68		pla				pla 									; get the first token back off the stack.
.01028b	29 00 10	and #$1000			and 	#$1000 							; non-zero if it is a string.
.01028e	16 20		asl $20,x			asl 	EXSPrecType+0,x 				; shift the prectype left
.010290	69 00 ff	adc #$ff00			adc 	#$FF00 							; put string bit into the carry bit
.010293	76 20		ror $20,x			ror 	EXSPrecType+0,x 				; rotate the string bit in.
.010295	82 79 ff	brl $010211			brl 	_ELGotAtom
.010298					_ELParenthesis:
.010298	e6 06		inc $06				inc 	DCodePtr 						; skip over the ( token
.01029a	e6 06		inc $06				inc 	DCodePtr
.01029c	20 0e 03	jsr $01030e			jsr 	EvaluateNext 					; calculate the value in parenthesis, using next space on the stack.
.01029f	20 65 01	jsr $010165			jsr 	ExpectRightBracket 				; check for ) which should close the parenthesised expression.
.0102a2	b5 02		lda $02,x			lda 	EXSValueL+2,x 					; copy the value in directly from level 2 to level 0.
.0102a4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a6	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0102a8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102aa	82 64 ff	brl $010211			brl 	_ELGotAtom 						; and go round looking for the next binary operator
.0102ad					_ELMinusAtom:
.0102ad	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.0102af	e6 06		inc $06				inc 	DCodePtr
.0102b1	e8		inx				inx 									; make space
.0102b2	e8		inx				inx
.0102b3	a9 00 10	lda #$1000			lda 	#8<<9 							; means binary operation will be impossible.
.0102b6	20 c7 01	jsr $0101c7			jsr 	EvaluateLevel 					; we just want the next atom. (does allow -(xxx))
.0102b9	ca		dex				dex
.0102ba	ca		dex				dex
.0102bb	38		sec				sec 									; do the subtraction 0-result to negate it.
.0102bc	a9 00 00	lda #$0000			lda 	#0
.0102bf	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102c1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102c3	a9 00 00	lda #$0000			lda 	#0
.0102c6	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102c8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102ca	4c 11 02	jmp $010211			jmp 	_ELGotAtom
.0102cd					_ELUnknownVariable:
.0102cd	20 25 01	jsr $010125			jsr 	ErrorHandler
>0102d0	55 6e 64 65 63 6c 61 72				.text 	"Undeclared variable",$00
>0102d8	65 64 20 76 61 72 69 61 62 6c 65 00
.0102e4					CheckBothNumeric:
.0102e4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; check bit 15 of both types are zero
.0102e6	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0102e8	30 01		bmi $0102eb			bmi 	_CNError
.0102ea	60		rts				rts
.0102eb					_CNError:
.0102eb	20 25 01	jsr $010125			jsr 	ErrorHandler
>0102ee	4e 75 6d 65 72 69 63 20				.text 	"Numeric values expected",$00
>0102f6	76 61 6c 75 65 73 20 65 78 70 65 63 74 65 64 00
.010306					ResetTypeInteger:
.010306	b5 20		lda $20,x			lda 	EXSPrecType+0,x 				; clear bit 15 of type, forcing an integer return.
.010308	29 ff 7f	and #$7fff			and 	#$7FFF
.01030b	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01030d	60		rts				rts
.01030e					EvaluateNext:
.01030e	e8		inx				inx 									; stack forward
.01030f	e8		inx				inx
.010310	a9 00 00	lda #$0000			lda 	#0<<9 							; lowest precedence.
.010313	20 c7 01	jsr $0101c7			jsr 	EvaluateLevel 					; do at next level
.010316	ca		dex				dex 									; reset stack
.010317	ca		dex				dex
.010318	60		rts				rts
.010319					EvaluateInteger:
.010319	20 c1 01	jsr $0101c1			jsr 	Evaluate
.01031c	b0 01		bcs $01031f			bcs 	EIType
.01031e	60		rts				rts
.01031f					EIType:
.01031f	20 25 01	jsr $010125			jsr 	ErrorHandler
>010322	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00
>01032a	78 70 65 63 74 65 64 00
.010332					EvaluateNextInteger:
.010332	20 0e 03	jsr $01030e			jsr 	EvaluateNext
.010335	b0 e8		bcs $01031f			bcs 	EIType
.010337	60		rts				rts
.010338					EvaluateString:
.010338	20 c1 01	jsr $0101c1			jsr 	Evaluate
.01033b	90 01		bcc $01033e			bcc 	ESType
.01033d	60		rts				rts
.01033e					ESType:
.01033e	20 25 01	jsr $010125			jsr 	ErrorHandler
>010341	53 74 72 69 6e 67 20 65				.text 	"String expected",$00
>010349	78 70 65 63 74 65 64 00
.010351					EvaluateNextString:
.010351	20 0e 03	jsr $01030e			jsr 	EvaluateNext
.010354	90 e8		bcc $01033e			bcc 	ESType
.010356	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010357					Binary_Add:
.010357	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010359	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01035b	30 12		bmi $01036f		bmi 	_BATypeError
.01035d	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01035f	30 3f		bmi $0103a0		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010361	18		clc			clc
.010362	b5 00		lda $00,x		lda		EXSValueL+0,x
.010364	75 02		adc $02,x		adc 	EXSValueL+2,x
.010366	95 00		sta $00,x		sta 	EXSValueL+0,x
.010368	b5 10		lda $10,x		lda		EXSValueH+0,x
.01036a	75 12		adc $12,x		adc 	EXSValueH+2,x
.01036c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01036e	60		rts			rts
.01036f					_BATypeError:
.01036f	20 25 01	jsr $010125			jsr 	ErrorHandler
>010372	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00
>01037a	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01038a	65 73 00
.01038d					_BALengthError:
.01038d	20 25 01	jsr $010125			jsr 	ErrorHandler
>010390	53 74 72 69 6e 67 20 74				.text 	"String too long",$00
>010398	6f 6f 20 6c 6f 6e 67 00
.0103a0					_BAConcatenateString:
.0103a0	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0103a2	85 08		sta $08			sta 	DTemp1
.0103a4	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0103a6	85 0c		sta $0c			sta 	DTemp2
.0103a8	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0103aa	18		clc			clc 										; work out the total length
.0103ab	b2 08		lda ($08)		lda 	(DTemp1)
.0103ad	72 0c		adc ($0c)		adc 	(DTemp2)
.0103af	b0 14		bcs $0103c5		bcs 	_BAConcatLengthError 				; string is too long.
.0103b1	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0103b3	20 77 01	jsr $010177		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0103b6	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0103b8	74 10		stz $10,x		stz 	EXSValueH+0,x
.0103ba	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0103bc	20 94 01	jsr $010194		jsr 	StringCreateCopy
.0103bf	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0103c1	20 94 01	jsr $010194		jsr 	StringCreateCopy
.0103c4	60		rts			rts
.0103c5					_BAConcatLengthError:
.0103c5	20 25 01	jsr $010125			jsr 	ErrorHandler
>0103c8	53 74 72 69 6e 67 20 74				.text 	"String too long",$00
>0103d0	6f 6f 20 6c 6f 6e 67 00
.0103d8					Binary_Subtract:
.0103d8	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.0103db	38		sec			sec
.0103dc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103de	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0103e0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103e2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103e4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0103e6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103e8	60		rts			rts
.0103e9					Binary_ShiftRight:
.0103e9	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.0103ec	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0103ee	29 3f 00	and #$003f		and 	#63
.0103f1	f0 07		beq $0103fa		beq		_Binary_SRExit
.0103f3					_Binary_SRLoop:
.0103f3	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0103f5	76 00		ror $00,x		ror 	EXSValueL+0,x
.0103f7	3a		dec a			dec 	a
.0103f8	d0 f9		bne $0103f3		bne 	_Binary_SRLoop
.0103fa					_Binary_SRExit:
.0103fa	60		rts			rts
.0103fb					Binary_ShiftLeft:
.0103fb	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.0103fe	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010400	29 3f 00	and #$003f		and 	#63
.010403	f0 07		beq $01040c		beq		_Binary_SLExit
.010405					_Binary_SLLoop:
.010405	16 00		asl $00,x		asl 	EXSValueL+0,x
.010407	36 10		rol $10,x		rol 	EXSValueH+0,x
.010409	3a		dec a			dec 	a
.01040a	d0 f9		bne $010405		bne 	_Binary_SLLoop
.01040c					_Binary_SLExit:
.01040c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01040d					Binary_And:
.01040d	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.010410	b5 00		lda $00,x		lda		EXSValueL+0,x
.010412	35 02		and $02,x		and 	EXSValueL+2,x
.010414	95 00		sta $00,x		sta 	EXSValueL+0,x
.010416	b5 10		lda $10,x		lda		EXSValueH+0,x
.010418	35 12		and $12,x		and 	EXSValueH+2,x
.01041a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01041c	60		rts			rts
.01041d					Binary_Or:
.01041d	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.010420	b5 00		lda $00,x		lda		EXSValueL+0,x
.010422	15 02		ora $02,x		ora 	EXSValueL+2,x
.010424	95 00		sta $00,x		sta 	EXSValueL+0,x
.010426	b5 10		lda $10,x		lda		EXSValueH+0,x
.010428	15 12		ora $12,x		ora 	EXSValueH+2,x
.01042a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01042c	60		rts			rts
.01042d					Binary_Xor:
.01042d	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.010430	b5 00		lda $00,x		lda		EXSValueL+0,x
.010432	55 02		eor $02,x		eor 	EXSValueL+2,x
.010434	95 00		sta $00,x		sta 	EXSValueL+0,x
.010436	b5 10		lda $10,x		lda		EXSValueH+0,x
.010438	55 12		eor $12,x		eor 	EXSValueH+2,x
.01043a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01043c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.01043d					Binary_Equals:
.01043d	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010440	b0 0e		bcs $010450		bcs 	_BEString
.010442	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010444	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010446	d0 4f		bne $010497		bne 	Compare_Fail
.010448	b5 10		lda $10,x		lda 	EXSValueH,x
.01044a	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01044c	d0 49		bne $010497		bne 	Compare_Fail
.01044e	80 3f		bra $01048f		bra 	Compare_Succeed
.010450					_BEString:
.010450	09 00 00	ora #$0000		ora 	#$0000
.010453	f0 3a		beq $01048f		beq 	Compare_Succeed
.010455	80 40		bra $010497		bra 	Compare_Fail
.010457					Binary_NotEquals:
.010457	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01045a	b0 0e		bcs $01046a		bcs 	_BNEString
.01045c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01045e	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010460	d0 2d		bne $01048f		bne 	Compare_Succeed
.010462	b5 10		lda $10,x		lda 	EXSValueH,x
.010464	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010466	d0 27		bne $01048f		bne 	Compare_Succeed
.010468	80 2d		bra $010497		bra 	Compare_Fail
.01046a					_BNEString:
.01046a	09 00 00	ora #$0000		ora 	#$0000
.01046d	d0 20		bne $01048f		bne 	Compare_Succeed
.01046f	80 26		bra $010497		bra 	Compare_Fail
.010471					Binary_Less:
.010471	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010474	b0 12		bcs $010488		bcs 	_BLString
.010476	38		sec			sec
.010477	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010479	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01047b	b5 10		lda $10,x		lda 	EXSValueH,x
.01047d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01047f	50 03		bvc $010484		bvc 	*+5
.010481	49 00 80	eor #$8000		eor 	#$8000
.010484	30 09		bmi $01048f		bmi 	Compare_Succeed
.010486	80 0f		bra $010497		bra 	Compare_Fail
.010488					_BLString:
.010488	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01048b	f0 02		beq $01048f		beq 	Compare_Succeed
.01048d	80 08		bra $010497		bra 	Compare_Fail
.01048f					Compare_Succeed:
.01048f	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010492	95 00		sta $00,x		sta 	EXSValueL,x
.010494	95 10		sta $10,x		sta 	EXSValueH,x
.010496	60		rts			rts
.010497					Compare_Fail:
.010497	74 00		stz $00,x		stz 	EXSValueL,x
.010499	74 10		stz $10,x		stz 	EXSValueH,x
.01049b	60		rts			rts
.01049c					Binary_GreaterEqual:
.01049c	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01049f	b0 12		bcs $0104b3		bcs 	_BGEString
.0104a1	38		sec			sec
.0104a2	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0104a4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104a6	b5 10		lda $10,x		lda 	EXSValueH,x
.0104a8	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104aa	50 03		bvc $0104af		bvc 	*+5
.0104ac	49 00 80	eor #$8000		eor 	#$8000
.0104af	10 de		bpl $01048f		bpl 	Compare_Succeed
.0104b1	80 e4		bra $010497		bra 	Compare_Fail
.0104b3					_BGEString:
.0104b3	09 00 00	ora #$0000		ora 	#$0000
.0104b6	10 d7		bpl $01048f		bpl 	Compare_Succeed
.0104b8	80 dd		bra $010497		bra 	Compare_Fail
.0104ba					Binary_LessEqual:
.0104ba	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104bd	b0 12		bcs $0104d1		bcs 	_BLEString
.0104bf	18		clc			clc 									; numeric <= signed
.0104c0	b5 00		lda $00,x		lda 	EXSValueL,x
.0104c2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104c4	b5 10		lda $10,x		lda 	EXSValueH,x
.0104c6	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104c8	50 03		bvc $0104cd		bvc 	*+5
.0104ca	49 00 80	eor #$8000		eor 	#$8000
.0104cd	30 c0		bmi $01048f		bmi 	Compare_Succeed
.0104cf	80 c6		bra $010497		bra 	Compare_Fail
.0104d1					_BLEString:
.0104d1	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0104d4	d0 b9		bne $01048f		bne 	Compare_Succeed
.0104d6	80 bf		bra $010497		bra 	Compare_Fail
.0104d8					Binary_Greater:
.0104d8	20 f6 04	jsr $0104f6		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104db	b0 12		bcs $0104ef		bcs 	_BGString
.0104dd	18		clc			clc 									; numeric > signed
.0104de	b5 00		lda $00,x		lda 	EXSValueL,x
.0104e0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104e2	b5 10		lda $10,x		lda 	EXSValueH,x
.0104e4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e6	50 03		bvc $0104eb		bvc 	*+5
.0104e8	49 00 80	eor #$8000		eor 	#$8000
.0104eb	10 a2		bpl $01048f		bpl 	Compare_Succeed
.0104ed	80 a8		bra $010497		bra 	Compare_Fail
.0104ef					_BGString:
.0104ef	c9 01 00	cmp #$0001		cmp 	#$0001
.0104f2	f0 9b		beq $01048f		beq 	Compare_Succeed
.0104f4	80 a1		bra $010497		bra 	Compare_Fail
.0104f6					CompareTypeCheck:
.0104f6	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0104f8	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104fa	30 06		bmi $010502		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0104fc	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0104fe	30 1c		bmi $01051c		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010500	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010501	60		rts			rts
.010502					_CTCFail:
.010502	20 25 01	jsr $010125			jsr 	ErrorHandler
>010505	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00
>01050d	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01051c					_CTCStringCompare:
.01051c	20 06 03	jsr $010306		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01051f	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010521	85 08		sta $08			sta 	DTemp1
.010523	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010525	85 0c		sta $0c			sta 	DTemp2
.010527	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01052a	a8		tay			tay
.01052b	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01052d	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01052f	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010531	90 02		bcc $010535		bcc 	_CTCSmallest
.010533	b2 0c		lda ($0c)		lda 	(DTemp2)
.010535					_CTCSmallest:
.010535	85 10		sta $10			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010537					_CTCCompare:
.010537	c8		iny			iny 									; look at next character (done first, first char is size)
.010538	c6 10		dec $10			dec 	DSignCount 						; decrement counter
.01053a	30 16		bmi $010552		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01053c	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01053e	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010540	f0 f5		beq $010537		beq 	_CTCCompare 					; if zero, try the next character.
.010542	b0 07		bcs $01054b		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010544					_CTCLess:
.010544	c2 20		rep #$20		rep 	#$20
.010546	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010549	80 14		bra $01055f		bra 	_CTCExit
.01054b					_CTCGreater:
.01054b	c2 20		rep #$20		rep 	#$20
.01054d	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010550	80 0d		bra $01055f		bra 	_CTCExit
.010552					_CTCEqualSoFar:
.010552	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010554	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010556	90 ec		bcc $010544		bcc 	_CTCLess
.010558	d0 f1		bne $01054b		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01055a	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01055c	a9 00 00	lda #$0000		lda 	#$0000
.01055f					_CTCExit:
.01055f	38		sec			sec 									; return with CS indicating string comparison.
.010560	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010561					Binary_Divide:
.010561	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.010564	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010566	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010568	d0 14		bne $01057e		bne 	_BinaryDivide_Ok
.01056a	20 25 01	jsr $010125			jsr 	ErrorHandler
>01056d	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00
>010575	20 62 79 20 7a 65 72 6f 00
.01057e					_BinaryDivide_Ok:
.01057e	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010580	64 0a		stz $0a			stz 	DTemp1+2
.010582	64 10		stz $10			stz 	DSignCount  						; zero sign count.
.010584	5a		phy			phy 										; save Y (bit counter)
.010585	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010587	10 07		bpl $010590		bpl 	_BinaryDivide_RightDone
.010589	e8		inx			inx
.01058a	e8		inx			inx
.01058b	20 c6 05	jsr $0105c6		jsr 	Binary_DivNegate
.01058e	ca		dex			dex
.01058f	ca		dex			dex
.010590					_BinaryDivide_RightDone:
.010590	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010592	10 03		bpl $010597		bpl 	_BinaryDivide_LeftDone
.010594	20 c6 05	jsr $0105c6		jsr 	Binary_DivNegate
.010597					_BinaryDivide_LeftDone:
.010597	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01059a					_BinaryDivide_Loop:
.01059a	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01059c	36 10		rol $10,x		rol 	EXSValueH+0,x
.01059e	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0105a0	26 0a		rol $0a			rol 	DTemp1+2
.0105a2	38		sec			sec											; calculate A-M
.0105a3	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0105a5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a7	85 0c		sta $0c			sta 	DTemp2
.0105a9	a5 0a		lda $0a			lda 	DTemp1+2
.0105ab	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105ad	90 08		bcc $0105b7		bcc 	_Binary_NoSubract 					; if A < M skip this
.0105af	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0105b1	a5 0c		lda $0c			lda 	DTemp2
.0105b3	85 08		sta $08			sta 	DTemp1+0
.0105b5	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0105b7					_Binary_NoSubract:
.0105b7	88		dey			dey 										; do it 32 times.
.0105b8	d0 e0		bne $01059a		bne 	_BinaryDivide_Loop
.0105ba					_BinaryDivide_Exit:
.0105ba	a5 10		lda $10			lda 	DSignCount 							; restore sign
.0105bc	29 01 00	and #$0001		and 	#1
.0105bf	f0 03		beq $0105c4		beq 	_BinaryDivide_Exit2
.0105c1	20 c6 05	jsr $0105c6		jsr 	Binary_DivNegate
.0105c4					_BinaryDivide_Exit2:
.0105c4	7a		ply			ply 										; restore Y
.0105c5	60		rts			rts
.0105c6					Binary_DivNegate:
.0105c6	e6 10		inc $10			inc 	DSignCount 							; increment the count of signs.
.0105c8	38		sec			sec 										; negate the value at stack X.
.0105c9	a9 00 00	lda #$0000		lda 	#$0000
.0105cc	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0105ce	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105d0	a9 00 00	lda #$0000		lda 	#$0000
.0105d3	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0105d5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105d7	60		rts			rts
.0105d8					Binary_Modulus:
.0105d8	20 61 05	jsr $010561		jsr 	Binary_Divide 						; do the divide
.0105db	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0105dd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105df	a5 0a		lda $0a			lda 	DTemp1+2
.0105e1	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105e3	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0105e4					Binary_Multiply:
.0105e4	20 e4 02	jsr $0102e4		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e7	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0105e9	85 08		sta $08			sta 	DTemp1
.0105eb	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0105ed	85 0a		sta $0a			sta		DTemp1+2
.0105ef	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0105f1	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105f3					_BinaryMultiply_Loop:
.0105f3	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0105f5	05 0a		ora $0a			ora 	DTemp1+2
.0105f7	f0 1e		beq $010617		beq 	_BinaryMultiply_Exit
.0105f9	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0105fb	29 01 00	and #$0001		and 	#1
.0105fe	f0 0d		beq $01060d		beq 	_BinaryMultiply_NoAdd
.010600	18		clc			clc 										; add multiplicand to result.
.010601	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010603	75 02		adc $02,x		adc 	EXSValueL+2,x
.010605	95 00		sta $00,x		sta 	EXSValueL+0,x
.010607	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010609	75 12		adc $12,x		adc 	EXSValueH+2,x
.01060b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01060d					_BinaryMultiply_NoAdd:
.01060d	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01060f	66 08		ror $08			ror 	DTemp1
.010611	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010613	36 12		rol $12,x		rol 	EXSValueH+2,x
.010615	80 dc		bra $0105f3		bra 	_BinaryMultiply_Loop 				; go round again.
.010617					_BinaryMultiply_Exit:
.010617	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010618					Function_Len:
.010618	20 06 03	jsr $010306			jsr 	ResetTypeInteger 			; returns an integer
.01061b	20 51 03	jsr $010351			jsr 	EvaluateNextString 			; get the value you are absoluting
.01061e	20 65 01	jsr $010165			jsr 	ExpectRightBracket 			; check )
.010621	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010623	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010626	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010629	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01062b	74 10		stz $10,x			stz 	EXSValueH+0,x
.01062d	60		rts				rts
.01062e					Function_Abs:
.01062e	20 06 03	jsr $010306			jsr 	ResetTypeInteger 			; returns an integer
.010631	20 32 03	jsr $010332			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010634	20 65 01	jsr $010165			jsr 	ExpectRightBracket 			; check )
.010637	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010639	30 07		bmi $010642			bmi 	_FAbsNegative 				; negate it if negative
.01063b	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01063d	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01063f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010641	60		rts				rts
.010642					_FAbsNegative:
.010642	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010643	a9 00 00	lda #$0000			lda 	#0
.010646	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010648	95 00		sta $00,x			sta 	EXSValueL+0,x
.01064a	a9 00 00	lda #$0000			lda 	#0
.01064d	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01064f	95 10		sta $10,x			sta 	EXSValueH+0,x
.010651	60		rts				rts
.010652					Function_Sgn:
.010652	20 06 03	jsr $010306			jsr 	ResetTypeInteger 			; returns integer
.010655	20 32 03	jsr $010332			jsr 	EvaluateNextInteger 		; get an integer
.010658	20 65 01	jsr $010165			jsr 	ExpectRightBracket 			; check )
.01065b	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01065d	74 10		stz $10,x			stz 	EXSValueH+0,x
.01065f	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010661	30 07		bmi $01066a			bmi 	_FSgnNegative 				; set to -1 if signed
.010663	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010665	f0 02		beq $010669			beq 	_FSgnExit
.010667	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010669					_FSgnExit:
.010669	60		rts				rts
.01066a					_FSgnNegative:
.01066a	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01066d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01066f	95 10		sta $10,x			sta 	EXSValueH+0,x
.010671	60		rts				rts
.010672					Function_Random:
.010672	20 06 03	jsr $010306			jsr 	ResetTypeInteger
.010675	a5 14		lda $14				lda 	DRandom 					; check for non-zero
.010677	05 16		ora $16				ora 	DRandom+2 					; they don't like these :)
.010679	d0 0a		bne $010685			bne 	_Rnd_NotZero
.01067b	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01067e	85 14		sta $14				sta 	DRandom
.010680	a9 ea 00	lda #$00ea			lda 	#$EA
.010683	85 16		sta $16				sta 	DRandom+2
.010685					_Rnd_NotZero:
.010685	20 90 06	jsr $010690			jsr 	_Rnd_Process 				; call randomiser twice
.010688	95 10		sta $10,x			sta 	EXSValueH+0,x
.01068a	20 90 06	jsr $010690			jsr 	_Rnd_Process
.01068d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01068f	60		rts				rts
.010690					_Rnd_Process:
.010690	06 14		asl $14				asl 	DRandom 					; shift right, exit
.010692	26 16		rol $16				rol 	DRandom+2
.010694	90 0e		bcc $0106a4			bcc 	_Rnd_Exit
.010696	a5 14		lda $14				lda 	DRandom 					; taps effectively
.010698	49 54 d4	eor #$d454			eor 	#$D454
.01069b	85 14		sta $14				sta 	DRandom
.01069d	a5 16		lda $16				lda 	DRandom+2
.01069f	49 d5 55	eor #$55d5			eor 	#$55D5
.0106a2	85 16		sta $16				sta 	DRandom+2
.0106a4					_Rnd_Exit:
.0106a4	a5 14		lda $14				lda 	DRandom
.0106a6	45 16		eor $16				eor 	DRandom+2
.0106a8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.0106a9					Function_Let:
.0106a9	b2 06		lda ($06)			lda 	(DCodePtr) 					; push the identifier token on the stack.
.0106ab	48		pha				pha
.0106ac	20 86 00	jsr $010086			jsr 	FindVariable 				; find the variable that we will set the value of.
.0106af	90 01		bcc $0106b2			bcc		_FLetFound
.0106b1	ea		nop				nop
.0106b2					_FLetFound:
.0106b2	68		pla				pla 								; token to A
.0106b3	a4 1e		ldy $1e				ldy 	DVariableDataAddress 		; push the target address on the stack
.0106b5	5a		phy				phy
.0106b6	29 00 10	and #$1000			and 	#$1000 						; check to see if it is a string assignment
.0106b9	d0 13		bne $0106ce			bne 	_FLetStringAssign
.0106bb	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for the equal presence.
.0106be	20 4b 01	jsr $01014b			jsr 	ExpectToken
.0106c1	20 19 03	jsr $010319			jsr 	EvaluateInteger 			; get an integer.
.0106c4	bb		tyx				tyx 								; result is now in XA
.0106c5	7a		ply				ply 								; target address in Y
.0106c6	99 00 00	sta $0000,y			sta 	$0000,y 					; save low word
.0106c9	8a		txa				txa
.0106ca	99 02 00	sta $0002,y			sta 	$0002,y 					; save high word
.0106cd	60		rts				rts 								; and complete.
.0106ce					_FLetStringAssign:
.0106ce	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for the equal presence.
.0106d1	20 4b 01	jsr $01014b			jsr 	ExpectToken
.0106d4	20 38 03	jsr $010338			jsr 	EvaluateString 				; get a string.
.0106d7	ea		nop				nop
.0106d8	7a		ply				ply 								; target address in Y
.0106d9	99 00 00	sta $0000,y			sta 	$0000,y 					; set LSW
.0106dc	a9 00 00	lda #$0000			lda 	#$0000
.0106df	99 02 00	sta $0002,y			sta 	$0002,y 					; clear LSW as its a string
.0106e2	60		rts				rts

;******  Return to file: ../source/basic.asm

.0106e3					SwitchBasicInstance:
.0106e3	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0106e5	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0106e8	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0106ea	86 02		stx $02				stx		DBaseAddress
.0106ec	84 04		sty $04				sty 	DHighAddress
.0106ee	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0106ef	48		pha				pha 										; then copy it into B.
.0106f0	ab		plb				plb
.0106f1	ab		plb				plb
.0106f2	20 b5 01	jsr $0101b5			jsr 	EvaluateReset 						; start new instruction reset (temp string storage)
.0106f5	a9 04 41	lda #$4104			lda 	#$4100+4 							; initialise Code Pointer
.0106f8	85 06		sta $06				sta 	DCodePtr
.0106fa	20 a9 06	jsr $0106a9			jsr 	Function_LET 						; evaluate it.
.0106fd						halt1:
.0106fd	02 00		cop #$00			cop 	#0
.0106ff	80 fc		bra $0106fd			bra 	halt1

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 4 times (64 bytes)...
>024058	00 00 00 00 00 00 00 00 2c 00 00 00 04 00 01 00
>024068	00 00 00 00 00 00 00 00 7a 41 b1 bf 00 00 00 00
>024078	00 00 00 00 00 00 00 00 00 00 00 00 22 41 00 00
>024088	00 00 36 41 00 00 00 00 00 00 00 00 00 00 00 00
>024098	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240a8	00 00 00 00 4a 41 00 00 00 00 00 00 00 00 00 00
>0240b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 41
>0240d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240e8	00 00 00 00 00 00 64 41 00 00 00 00 00 00 00 00
>0240f8	00 00 00 00 00 00 00 00 1c 00 0a 80 97 7b 3f 78
>024108	3c 7b 07 5d 01 80 19 3c 06 22 08 00 05 68 65 6c
>024118	6c 6f 00 00 00 00 ee ee ee ee 00 00 fa bf 00 00
>024128	fe ff ff ff 00 00 f8 bf 00 00 d6 ff ff ff 2c 41
>024138	f4 bf 00 00 46 0c 00 00 00 00 f0 bf 00 00 dd bf
>024148	00 00 00 00 d9 bf 04 00 2e 04 02 00 2e 04 03 00
>024158	2e 04 04 00 2e 04 05 00 2e 04 06 00 00 00 d1 bf
>024168	03 00 c9 bf 00 00 c1 bf 00 00 b9 bf 00 00 b1 bf
>024178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2018 times (32288 bytes)...
>02bfa8	00 00 00 00 00 00 00 00 00 05 61 73 74 2e 33 00
>02bfb8	00 05 61 73 74 2e 32 00 00 05 61 73 74 2e 31 00
>02bfc8	00 05 61 73 74 2e 30 00 00 97 7b 3f 78 3c 7b 07
>02bfd8	5d 36 68 fe 4c 10 74 68 69 73 20 69 73 20 61 20
>02bfe8	73 74 72 69 6e 67 00 00 4b 74 1c 50 f5 64 18 40
>02bff8	f5 44 a2 61 bf 63 2c 45
.02c000					CodeEndSpace:

;******  End of listing
